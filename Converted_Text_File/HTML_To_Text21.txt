Activity Selection Problem - javatpoint?HomeDSDAADBMSAptitudeSeleniumKotlinC#HTMLCSSJavaScriptjQueryQuizProjectsInterview QCommentForumTrainingDAA TutorialDAA Tutorial DAA Algorithm Need of Algorithm Complexity of Algorithm Algorithm Design TechniquesAsymptotic AnalysisAsymptotic Analysis Analyzing Algorithm Control StructureRecurrenceRecurrence Relation Recursion Tree Method Master MethodAnalysis of SortingBubble Sort Selection Sort Insertion SortDivide and ConquerIntroduction Max-Min Problem Binary Search Merge Sort Tower of HanoiSortingBinary Heap Quick Sort Stable SortingLower bound Theory Lower bound Theory Sorting in Linear TimeLinear Time Counting Sort Bucket Sort Radix SortHashingHashing Hash Tables Hashing Method Open Addressing Techniques Hash FunctionBinary Search TreesBinary SearchRed Black TreeRed BlackDynamic ProgrammingIntroduction Divide & Conquer Method vs Dynamic Programming Fibonacci sequence Matrix Chain Multiplication Matrix Chain Multiplication Example Matrix Chain Multiplication Algorithm Longest Common Sequence Longest Common Sequence Algorithm 0/1 Knapsack ProblemGreedy AlgorithmIntroduction Activity Selection Problem Fractional Knapsack problem Huffman Codes Algorithm of Huffman Code Activity or Task Scheduling Problem Travelling Sales Person Problem Dynamic Programming vs Greedy MethodBacktrackingBacktracking Introduction Recursive Maze Algorithm Hamiltonian Circuit Problems Subset Sum Problems N Queens ProblemsMSTMST Introduction MST Applications Kruskal's Algorithm Prim's AlgorithmShortest PathIntroduction Negative Weight Edges Representing Shortest Path Relaxation Dijkstra's Algorithm Bellman-Ford Algorithm Single Source Shortest Path in a directed Acyclic GraphsAll-Pairs Shortest PathsIntroduction Floyd-Warshall Algorithm Johnson's AlgorithmMaximum FlowFlow networks and Flows Network Flow Problems Ford Fulkerson Algorithm Maximum bipartite matchingSorting NetworksComparison Network Bitonic Sorting Network Merging NetworkComplexity TheoryComplexity Classes Polynomial Time Verification NP-Completeness Circuit Satisfiability 3-CNF Satisfiability Clique Problem Vertex Cover Problem Subset-Sum ProblemApproximation AlgoIntroduction Vertex Cover Travelling Salesman ProblemString MatchingIntroduction Naive String Matching Algorithm Rabin-Karp-Algorithm String Matching with Finite Automata Knuth-Morris-Pratt Algorithm Boyer-Moore AlgorithmInterview QuestionsDAA Interview Questionsnext ? ? prevAn Activity Selection ProblemThe activity selection problem is a mathematical optimization problem. Our first illustration is the problem of scheduling a resource among several challenge activities. We find a greedy algorithm provides a well designed and simple method for selecting a maximum- size set of manually compatible activities.Suppose S = {1, 2....n} is the set of n proposed activities. The activities share resources which can be used by only one activity at a time, e.g., Tennis Court, Lecture Hall, etc. Each Activity "i" has start time si and a finish time fi, where si ?fi. If selected activity "i" take place meanwhile the half-open time interval [si,fi). Activities i and j are compatible if the intervals (si, fi) and [si, fi) do not overlap (i.e. i and j are compatible if si ?fi or si ?fi). The activity-selection problem chosen the maximum- size set of mutually consistent activities.Algorithm Of Greedy- Activity Selector:GREEDY- ACTIVITY SELECTOR (s, f)
1. n ? length [s]
2. A ? {1}
3. j ? 1.
4. for i ? 2 to n
5. do if si ? fi
6. then A ? A ? {i}
7. j ? i
8. return AExample: Given 10 activities along with their start and end time asS = (A1 A2 A3 A4 A5 A6 A7 A8 A9 A10)
Si = (1,2,3,4,7,8,9,9,11,12)
fi = (3,5,4,7,10,9,11,13,12,14)Compute a schedule where the greatest number of activities takes place.Solution: The solution to the above Activity scheduling problem using a greedy strategy is illustrated below:Arranging the activities in increasing order of end timeNow, schedule A1Next schedule A3 as A1 and A3 are non-interfering.Next skip A2 as it is interfering.Next, schedule A4 as A1 A3 and A4 are non-interfering, then next, schedule A6 as A1 A3 A4 and A6 are non-interfering.Skip A5 as it is interfering.Next, schedule A7 as A1 A3 A4 A6 and A7 are non-interfering.Next, schedule A9 as A1 A3 A4 A6 A7 and A9 are non-interfering.Skip A8 as it is interfering.Next, schedule A10 as A1 A3 A4 A6 A7 A9 and A10 are non-interfering.Thus the final Activity schedule is:Next TopicFractional Knapsack problem? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
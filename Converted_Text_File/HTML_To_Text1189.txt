Canonical Collection of LR 0 Items - javatpoint?HomeCompilerData StructureCC++C#JavaSQLHTMLCSSJavaScriptAjaxAndroidCloudDesign PatternQuizProjectsInterview QCommentCompiler TutorialCompiler Tutorial Compiler Introduction Compiler Phases Compiler Passes Bootstrapping Finite State machine Regular expression Optimization of DFA LEX Formal Grammar BNF Notation YACC Context free Grammars Capabilities of CFG Derivation Parse Tree AmbiguityBasic ParsingParser Shift Reduce Parsing Operator PrecedencePredictive ParsersLR parser LR(0) Items SLR(1) Parsing CLR(1) Parsing LALR(1) Parsing Parser GeneratorSDTSyntax Directed Translation SDT Translation scheme SDT ImplementationIntermediate Code Postfix Notation Parse and syntax trees Three address code Quadruples Triples Assignment statements Boolean expressions Flow altering statements Postfix translation Array references Procedures call Declarations Case StatementsSymbol TablesSymbol Table DS for symbols tables Scope InformationAdministrationStorage Organization Activation Record Storage AllocationError DetectionLexical Error Syntax Error Semantic ErrorCode GenerationCode Generation Design Issues Target Machine Run Time Storage Basic Block Flow Graph Block Optimization Code GeneratorCode OptimizationMachine Independent Loop optimization DAG Representation Data-Flow Analysisnext ? ? prevCanonical Collection of LR(0) itemsAn LR (0) item is a production G with dot at some position on the right side of the production.LR(0) items is useful to indicate that how much of the input has been scanned up to a given point in the process of parsing.In the LR (0), we place the reduce node in the entire row.ExampleGiven grammar:S ? AA
A ? aA | bAdd Augment Production and insert '•' symbol at the first position for every production in GS` ? •S
S ? •AA
A ? •aA 
A ? •bI0 State:Add Augment production to the I0 State and Compute the ClosureI0 = Closure (S` ? •S)Add all productions starting with S in to I0 State because "•" is followed by the non-terminal. So, the I0 State becomesI0 = S` ? •S       S ? •AAAdd all productions starting with "A" in modified I0 State because "•" is followed by the non-terminal. So, the I0 State becomes.I0= S` ? •S       S ? •AA       A ? •aA       A ? •bI1= Go to (I0, S) = closure (S` ? S•) = S` ? S•Here, the Production is reduced so close the State.I1= S` ? S•I2= Go to (I0, A) = closure (S ? A•A)Add all productions starting with A in to I2 State because "•" is followed by the non-terminal. So, the I2 State becomesI2 =S?A•A       A ? •aA       A ? •bGo to (I2,a) = Closure (A ? a•A) = (same as I3)Go to (I2, b) = Closure (A ? b•) = (same as I4)I3= Go to (I0,a) = Closure (A ? a•A)Add productions starting with A in I3.A ? a•AA ? •aAA ? •bGo to (I3, a) = Closure (A ? a•A) = (same as I3)Go to (I3, b) = Closure (A ? b•) = (same as I4)I4= Go to (I0, b) = closure (A ? b•) = A ? b•I5= Go to (I2, A) = Closure (S ? AA•) = SA ? A•I6= Go to (I3, A) = Closure (A ? aA•) = A ? aA•Drawing DFA:The DFA contains the 7 states I0 to I6.LR(0) TableIf a state is going to some other state on a terminal then it correspond to a shift move.If a state is going to some other state on a variable then it correspond to go to move.If a state contain the final item in the particular row then write the reduce node completely.Explanation:I0 on S is going to I1 so write it as 1.I0 on A is going to I2 so write it as 2.I2 on A is going to I5 so write it as 5.I3 on A is going to I6 so write it as 6.I0, I2and I3on a are going to I3 so write it as S3 which means that shift 3.I0, I2 and I3 on b are going to I4 so write it as S4 which means that shift 4.I4, I5 and I6 all states contains the final item because they contain • in the right most end. So rate the production as production number.Productions are numbered as follows:S  ?      AA    ... (1)                            
A   ?     aA      ... (2) 
A    ?    b     ... (3)I1 contains the final item which drives(S` ? S•), so action {I1, $} = Accept.I4 contains the final item which drives A ? b• and that production corresponds to the production number 3 so write it as r3 in the entire row.I5 contains the final item which drives S ? AA• and that production corresponds to the production number 1 so write it as r1 in the entire row.I6 contains the final item which drives A ? aA• and that production corresponds to the production number 2 so write it as r2 in the entire row.Next TopicSLR 1 Parsing? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
AVR Registers - javatpoint?HomeC LanguageJavaEmbedded SystemRoboticsSQLHTMLCSSJavaScriptXMLPythonAndroidQuizProjectsInterview QCommentForumEmbedded SystemEmbedded System 10+8051 MicroController8051 MicroController 10+AVR MicroController AVR MicroController ATmega32 MicroController ATmega32 Pin Diagram ATmega32 Memories ATmega8 MicroController ATmega8 Pin Diagram I/O Port Programming AVR Registers Programming using Studio LCD Interfacing SPI in AVR Keyboard Interfacing ADC Interfacing Serial Communication PWM MicroController Interrupts MicroControllerES ProjectsES Projects Fire Detection Project RFID Attendance SystemRoboticsRobotics Tutorialnext ? ? prevAVR RegistersAVR is 8 bit microcontroller therefore all its ports are 8 bit wide. Every port has 3 registers associated with it each one have size of 8 bits. Every bit in those registers configures the pins of particular port. Bit0 of these registers are associated with Pin0 of the port, Bit1 of these registers are associated with Pin1 of the port, and same as for other bits.The three registers available in AVR microcontroller are as follows:DDRx registerPORTx registerPINx registerDDRx register:Data Direction Register configures the data direction of port pins. These registers are used for determining whether port pins will be used for input or output. On writing 1 to a bit in DDRx makes corresponding port pin as output, while writing 0 to a bit in DDRx makes corresponding port pin as input.For example:For making all pins of port A as output pins: DDRA= 0b11111111; 
 For making all pins of port A as input pins: DDRA= 0b00000000; 
  For making lower nibble of port B as output and higher nibble as input: DDRB=0b00001111; 
 PINx register:PINx register used to read the data from port pins. In order to read the data from port pin, first we have to change the port?s data direction to input. This is done by setting bits in DDRx to zero. If port is made output, then reading PINx register will give a data that has been output on port pins.There are two input modes. Either we can use port pins as internal pull up or as tri stated inputs. It will be explained as shown below:For reading the data from port A,DDRA = 0x00;    //Set port A as input
x = PINA;       //Read contents of port a PORTx register:In general PORTx register can be used for two purposes:To output data: when port is configured as output then PORTx register is used. When we set bits in DDRx to 1, corresponding pins becomes output pins. Now we can write the data into respective bits in PORTx register. This will immediately change the output state of pins according to data we have written on the ports.For example:To output data in variable x on port ADDRA = 0xFF;              //make port A as outputs
PORTA = x;                //output variable on portTo output 0xFF data on port BDDRB = 0b11111111;        //set all the pins of port B as outputs
PORTB = 0xFF;             //write the data on port To output data on only 0th bit of port CDDRC.0 = 1;        //set only 0th pin of port C as an output
PORTC.0 = 1;       //make it high signal. To activate/deactivate pull up resistors: when port is configured as input we set the bits in DDRx to 0, i.e. make port pins as inputs the corresponding bits in PORTx registers used to activate/deactivate pull-up registers associated with that pin. In order for activating pull-up resistor, set the bit in PORTx register to 1, and for deactivating (i.e. to make port as tri stated) set it to zero.In input mode, when pull-up is enabled, default state of the pin is '1'. So if we don't add anything to pin and if we try to read it then it will read as 1.Note: While using on chip Analog to Digital Converter (ADC), ADC port pins must be used as tri stated input.For example:To make lower nibble of port A as output, higher nibble as input with pull-ups enabledDDRA = 0x0F;        // higher nib> input, lower nib> output
PORTA = 0xF0;        //lower nib> set output pins to 0 To make port B as tri stated inputDDRB = 0x00;        //use port B as input
PORTB = 0x00;        //Disable pull-ups register and make it tri stateTo make port C as input with pull-ups enabled and read data from port aDDRC = 0x00;        //make port C as input
PORTC = 0xFF;       //enable all pull-ups
y = PINC;           //read data from port C pinsNext TopicProgramming using AVR Studio? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
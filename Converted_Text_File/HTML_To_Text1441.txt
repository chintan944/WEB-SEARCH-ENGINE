Computer Graphics Bresenham's Line Algorithm - javatpoint?HomeComputer FundamentalsComputer GraphicsBiometricsComputer NetworkJavaHTMLCSSSeleniumjQueryProjectsInterview QCommentForumTrainingComputer GraphicsComputer Graphics Tutorial Application of Computer Graphics Interactive and Passive GraphicsGraphic SystemsDisplay Processor Cathode Ray Tube (CRT) Random Scan vs Raster Scan Color CRT Monitors Direct View Storage Tubes Flat Panel DisplayInput-Output DevicesInput Devices Trackball Light Pen Image Scanner Output Devices PlottersScan Conversion a lineScan Conversion Definition Scan Converting a Point Scan Converting a Straight Line DDA Algorithm Bresenham's Line AlgorithmScan Conversion CircleDefining a Circle Defining a Circle using Polynomial Method Defining a Circle using Polar Coordinates Method Bresenham's Circle Algorithm Midpoint Circle AlgorithmScan Converting EllipseScan converting a Ellipse Polynomial Method Trignometric Method Midpoint Ellipse AlgorithmFilled Area PrimitivesBoundary Fill Algorithm Flood Fill Algorithm Scan Line Polygon Fill Algorithm2D TransformationsIntroduction of Transformation Translation Scaling Rotation Reflection Shearing Matrix Representation Homogeneous Coordinates Composite Transformation Pivot Point Rotation2D-ViewingWindow Window to Viewport Co-ordinate Transformation Zooming PanningClipping TechniquesClipping Point Clipping Line Clipping Midpoint Subdivision Algorithm Text Clipping Polygon Sutherland-Hodgeman Polygon Clipping Weiler-Atherton Polygon ClippingPointing & PositioningPointing & Positioning Techniques Elastic or Rubber Band Techniques DraggingShadingIntroduction of Shading Constant Intensity Shading Gouraud shading Phong ShadingAnimationAnimation Application Areas of Animation Animation Functions3D Computer GraphicsThree Dimensional Graphics Three Dimensional Transformations Scaling Rotation Rotation about Arbitrary Axis Inverse Transformations Reflection ShearingHidden SurfacesHidden Surface Removal Back Face Removal Algorithm Z-Buffer Algorithm Painter's Algorithm Scan Line Algorithm Subdivision Algorithm 3D Modelling SystemProjectionProjection Perspective Projection Parallel ProjectionProgramsComputer Graphics Programsnext ? ? prevBresenham's Line AlgorithmThis algorithm is used for scan converting a line. It was developed by Bresenham. It is an efficient method because it involves only integer addition, subtractions, and multiplication operations. These operations can be performed very rapidly so lines can be generated quickly.In this method, next pixel selected is that one who has the least distance from true line.The method works as follows:Assume a pixel P1'(x1',y1'),then select subsequent pixels as we work our may to the night, one pixel position at a time in the horizontal direction toward P2'(x2',y2').Once a pixel in choose at any stepThe next pixel isEither the one to its right (lower-bound for the line)One top its right and up (upper-bound for the line)The line is best approximated by those pixels that fall the least distance from the path between P1',P2'.To chooses the next one between the bottom pixel S and top pixel T.            If S is chosen            We have xi+1=xi+1       and       yi+1=yi            If T is chosen            We have xi+1=xi+1       and       yi+1=yi+1The actual y coordinates of the line at x = xi+1is            y=mxi+1+bThe distance from S to the actual line in y direction            s = y-yiThe distance from T to the actual line in y direction            t = (yi+1)-yNow consider the difference between these 2 distance values            s - tWhen (s-t) 0 ? s tThe closest pixel is SWhen (s-t) ?0 ? s tThe closest pixel is TThis difference is            s-t = (y-yi)-[(yi+1)-y]                    = 2y - 2yi -1            Substituting m by  and introducing decision variable                di=?x (s-t)                di=?x (2  (xi+1)+2b-2yi-1)                        =2?xyi-2?y-1?x.2b-2yi?x-?x                di=2?y.xi-2?x.yi+cWhere c= 2?y+?x (2b-1)We can write the decision variable di+1 for the next slip on                di+1=2?y.xi+1-2?x.yi+1+c                di+1-di=2?y.(xi+1-xi)- 2?x(yi+1-yi)Since x_(i+1)=xi+1,we have                di+1+di=2?y.(xi+1-xi)- 2?x(yi+1-yi)Special CasesIf chosen pixel is at the top pixel T (i.e., di?0)? yi+1=yi+1                di+1=di+2?y-2?xIf chosen pixel is at the bottom pixel T (i.e., di0)? yi+1=yi                di+1=di+2?yFinally, we calculate d1                d1=?x[2m(x1+1)+2b-2y1-1]                d1=?x[2(mx1+b-y1)+2m-1]Since mx1+b-yi=0 and m = , we have                d1=2?y-?xAdvantage:1. It involves only integer arithmetic, so it is simple.2. It avoids the generation of duplicate points.3. It can be implemented using hardware because it does not use multiplication and division.4. It is faster as compared to DDA (Digital Differential Analyzer) because it does not involve floating point calculations like DDA Algorithm.Disadvantage:1. This algorithm is meant for basic line drawing only Initializing is not a part of Bresenham's line algorithm. So to draw smooth lines, you should want to look into a different algorithm.Bresenham's Line Algorithm:Step1: Start AlgorithmStep2: Declare variable x1,x2,y1,y2,d,i1,i2,dx,dyStep3: Enter value of x1,y1,x2,y2                Where x1,y1are coordinates of starting point                And x2,y2 are coordinates of Ending pointStep4: Calculate dx = x2-x1                Calculate dy = y2-y1                Calculate i1=2*dy                Calculate i2=2*(dy-dx)                Calculate d=i1-dxStep5: Consider (x, y) as starting point and xendas maximum possible value of x.                If dx 0                        Then x = x2                        y = y2                          xend=x1                If dx > 0                    Then x = x1                y = y1                        xend=x2Step6: Generate point at (x,y)coordinates.Step7: Check if whole line is generated.                If x > = xend                Stop.Step8: Calculate co-ordinates of the next pixel                If d 0                    Then d = d + i1                If d ? 0          Then d = d + i2                Increment y = y + 1Step9: Increment x = x + 1Step10: Draw a point of latest (x, y) coordinatesStep11: Go to step 7Step12: End of AlgorithmExample: Starting and Ending position of the line are (1, 1) and (8, 5). Find intermediate points.Solution: x1=1                y1=1                x2=8                y2=5                dx= x2-x1=8-1=7                dy=y2-y1=5-1=4                I1=2* ?y=2*4=8                I2=2*(?y-?x)=2*(4-7)=-6                d = I1-?x=8-7=1xyd=d+I1 or I211d+I2=1+(-6)=-522d+I1=-5+8=332d+I2=3+(-6)=-343d+I1=-3+8=553d+I2=5+(-6)=-164d+I1=-1+8=774d+I2=7+(-6)=185Program to implement Bresenham's Line Drawing Algorithm:#include
#include
void drawline(int x0, int y0, int x1, int y1)
{
    int dx, dy, p, x, y;
    dx=x1-x0;
    dy=y1-y0;
    x=x0;
    y=y0;
    p=2*dy-dx;
    while(x=0)
        {
            putpixel(x,y,7);
            y=y+1;
            p=p+2*dy-2*dx;
        }
        else
        {
            putpixel(x,y,7);
            p=p+2*dy;}
            x=x+1;
        }
}
int main()
{
    int gdriver=DETECT, gmode, error, x0, y0, x1, y1;
    initgraph(&gdriver, &gmode, "c:\\turboc3\\bgi");
    printf("Enter co-ordinates of first point: ");
    scanf("%d%d", &x0, &y0);
    printf("Enter co-ordinates of second point: ");
    scanf("%d%d", &x1, &y1);
    drawline(x0, y0, x1, y1);
    return 0;
}Output:Differentiate between DDA Algorithm and Bresenham's Line Algorithm:DDA AlgorithmBresenham's Line Algorithm1. DDA Algorithm use floating point, i.e., Real Arithmetic.1. Bresenham's Line Algorithm use fixed point, i.e., Integer Arithmetic2. DDA Algorithms uses multiplication & division its operation2.Bresenham's Line Algorithm uses only subtraction and addition its operation3. DDA Algorithm is slowly than Bresenham's Line Algorithm in line drawing because it uses real arithmetic (Floating Point operation)3. Bresenham's Algorithm is faster than DDA Algorithm in line because it involves only addition & subtraction in its calculation and uses only integer arithmetic.4. DDA Algorithm is not accurate and efficient as Bresenham's Line Algorithm.4. Bresenham's Line Algorithm is more accurate and efficient at DDA Algorithm.5.DDA Algorithm can draw circle and curves but are not accurate as Bresenham's Line Algorithm5. Bresenham's Line Algorithm can draw circle and curves with more accurate than DDA Algorithm.Next TopicDefining a Circle? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
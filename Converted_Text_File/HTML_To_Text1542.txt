Configure JPA and Initialized Data - javatpoint?HomeMicroservicesCore JavaServletJSPStruts2HibernateSpringAndroidDesign PatternQuizProjectsInterview QCommentForumMicroservices TutorialMicroservices Tutorial Advantages and Disadvantages of Microservices Challenges of Microservices Architecture Difference between MSA and SOA Microservices Monitoring and Virtualization Tool Microservices Components and Standardizing Port and URL Creating a Simple Microservice Setting up Spring Cloud Config Server Connect Spring Cloud Config Server to Local Git Repository Introduction to Currency Conversion and Currency Exchange Service Configure JPA and Initialized Data Creating a JPA Repository Setting up Currency Conversion Microservice Invoking Currency Exchange Microservice from Currency Conversion Microservice Using Feign REST Client for Service Invocation Client Side Load Balancing with Ribbon Eureka Naming Server Connecting Microservice to Eureka Distributing Calls Using Eureka and Ribbon Introduction to API Gateway Zuul API Gateway Implementing Zuul Logging Filter Executing a Request through Zuul API Gateway Introduction to Distributed Tracing Installing RabbitMQ Server Distributed Tracing with Zipkin Connecting Microservices to Zipkin Understanding the need for Spring Cloud Bus Implementing Spring Cloud Bus Fault Tolerance with Hystrixnext ? ? prevConfigure JPA and Initialized DataIn the previous section, we have hardcoded the response for the exchange value. It comes from the database. In this section, we will create a connection to the in-memory database.Let's see how to connect microservice to the H2 database. Follow the following steps to connect microservice to JPA in-memory database.Step 1: Open pom.xml of currency-exchange-service and add the following two dependencies.<dependency>
<groupId>com.h2database</groupId>
<artifactId>h2</artifactId>
<version>1.4.197</version>
<scope>test</scope>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-data-jpa</artifactId>
<version>2.1.3.RELEASE</version>
</dependency>Once we have added the dependencies, now we have to define entity.Step 2: Open the ExchangeValue.java file and do the following:Add @Entity annotation at the class level.Define the table name by using the annotation @Table.Define an Id for the entity by adding the annotation @Id.Define columns by adding the annotation @Column above each field and also specify the column name.ExchangeValue.javapackage com.javatpoint.microservices.currencyexchangeservice;
import java.math.BigDecimal;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
@Entity
@Table(name="Exchange_Value")
public class ExchangeValue 
{
@Id
@Column(name="id")
private Long id;
@Column(name="currency_from")
private String from;
@Column(name="currency_to")
private String to;
@Column(name="conversion_multiple")
private BigDecimal conversionMultiple;
@Column(name="port")
private int port;
//default conatructor
public ExchangeValue()
{	
}
//generating constructor using fields
public ExchangeValue(Long id, String from, String to, BigDecimal conversionMultiple) 
{
super();
this.id = id;
this.from = from;
this.to = to;
this.conversionMultiple = conversionMultiple;
}
//generating getters and setters
public int getPort() 
{
return port;
}
public void setPort(int port) 
{
this.port = port;
}
public Long getId() 
{
return id;
}
public String getFrom() 
{
return from;
}
public String getTo() 
{
return to;
}
public BigDecimal getConversionMultiple() 
{
return conversionMultiple;
}
}We have created the entity, now we have to insert some data into the database.Step 3: Create a data.sql file to insert data into database.Right-click on the folder src/main/resources -> New -> File -> Provide the name data.sql -> FinishStep 4: Insert the data into data.sql file. We have inserted the following data:data.sqlinsert into exchange_value(id,currency_from,currency_to,conversion_multiple,port)
values(10001,'USD', 'INR' ,65,0);
insert into exchange_value(id,currency_from,currency_to,conversion_multiple,port)
values(10002,'EUR', 'INR' ,75,0);
insert into exchange_value(id,currency_from,currency_to,conversion_multiple,port)
values(10003,'AUD', 'INR' ,25,0);Step 5: Open application.properties file and enable H2 console, configure URL and datasource. The default JDBC URL is testdb. We can specify our own JDBC URL.We have specified JDBS URL: jdbc:h2:mem:javatpoint application.propertiesspring.application.name=currency-exchange-service
server.port=8000
spring.jpa.show-sql=true
spring.h2.console.enabled=true
spring.datasource.platform=h2
spring.datasource.url=jdbc:h2:mem:javatpointStep 6: Restart the application.Step 7: Open the browser and type the URI http://localhost:8000/currency-exchange/from/USD/to/INR. It returns the response, as shown below:We can also see the data in the database which we have inserted in the data.sql file. To open the H2 Console, we have to do the following:In the browser type http://localhost:8000/h2-console. It displays the following page:Remember: The JDBC URL must be the same as you have specified in the application.properties file. Do not write anything in the User Name and Password field. The default User Name is sa.Now click on the Test Connection button; if the connection is successful, it shows the message Test Successful.Step 8: Click on the Connect button. It shows the created table on the left-hand side of the page.Step 9: Run the following query to view the data.SELECT *FROM EXCHANGE_VALUE;It shows the data which we have inserted in the data.sql file.In this section, we have created the in-memory database and inserted some values in the database.Click here to download currency-exchange-serviceNext TopicCreating a JPA Repository? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
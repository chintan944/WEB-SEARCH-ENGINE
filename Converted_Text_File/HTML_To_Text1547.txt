Connecting Microservices to Zipkin - javatpoint?HomeMicroservicesCore JavaServletJSPStruts2HibernateSpringAndroidDesign PatternQuizProjectsInterview QCommentForumMicroservices TutorialMicroservices Tutorial Advantages and Disadvantages of Microservices Challenges of Microservices Architecture Difference between MSA and SOA Microservices Monitoring and Virtualization Tool Microservices Components and Standardizing Port and URL Creating a Simple Microservice Setting up Spring Cloud Config Server Connect Spring Cloud Config Server to Local Git Repository Introduction to Currency Conversion and Currency Exchange Service Configure JPA and Initialized Data Creating a JPA Repository Setting up Currency Conversion Microservice Invoking Currency Exchange Microservice from Currency Conversion Microservice Using Feign REST Client for Service Invocation Client Side Load Balancing with Ribbon Eureka Naming Server Connecting Microservice to Eureka Distributing Calls Using Eureka and Ribbon Introduction to API Gateway Zuul API Gateway Implementing Zuul Logging Filter Executing a Request through Zuul API Gateway Introduction to Distributed Tracing Installing RabbitMQ Server Distributed Tracing with Zipkin Connecting Microservices to Zipkin Understanding the need for Spring Cloud Bus Implementing Spring Cloud Bus Fault Tolerance with Hystrixnext ? ? prevConnecting Microservices to ZipkinIn this section, we will connect microservices to put their trace messages on the RabbitMQ. Once we place the messages on the RabbitMQ, it will be picked up by the Zipkin server.Let’s connect the currency-conversion-service, currency-exchange-service, and the netflix-zuul-api-gateway-server to the RabbitMQ server.Step 1: Open the pom.xml file of currency-conversion-service, currency-exchange-service, and the netflix-zuul-api-gateway-server and add the following dependencies:We want to create a message in the format that it excepts. We need to add Zipkin dependency.<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-sleuth-zipkin</artifactId>
</dependency>We will send the message to Zipkin that uses amqp message protocol. So we need to add the amqp dependency. Adding the dependency of amqp, we get the connection of RabbitMQ into currency-conversion-service, currency-exchange-service, and the netflix-zuul-api-gateway-server.<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-starter-bus-amqp</artifactId>
</dependency>Now, we will try to run all the services together.Using Zipkin UI Dashboard to trace the requestIn this step, we will fire a request. But before firing a request, make sure that the five services are running correctly. We must run these five services in the following order. Otherwise, we get errors or incorrect responses.Step 1: Run the following services in the same order as we have listed.NetflixEurekaNamingServerApplication.javaZipkinDistributedTracingServerApplication (run from the Command Prompt)CurrencyExchangeServiceApplication.java (on port 8000)CurrencyConversionServiceApplication.java (on port 8100)NetflixZuulApiGatewayServerApplication.javaRemember: Make sure that all the five applications are running correctly.Step 2: Invoke the request http://localhost:8100/currency-converter-feign/from/EUR/to/INR/quantity/100. It returns the response properly.But we are interested to know what is happening in the background.Step 3: Open the Zipkin UI. It shows all the three services that we have connected to Zipkin.Step 4: Select any one service from the dropdown list and click on the Find Traces button. We have selected a currency-conversion-service. It shows the list of different execution of currency-conversion-service.Step 5: Select any one of them. It shows the entire trace of a service.In the above figure, when we invoke the currency-converter-feign, the request first goes to the API Gateway, and the API Gateway sends the request to the currency-exchange-service.We can also see the detail of the services. In the following image, we have shown the details of the currency-exchange-service.The most important challenge in microservices is to bring visibility (what is happening in the background). Hence, the Zipkin server enables the visibility of the services.Click here to download currency-conversion-serviceClick here to download currency-exchange-serviceClick here to download netflix-eureka-naming-serverClick here to download netflix-zuul-api-gateway-serverNext TopicUnderstanding the need for Spring Cloud Bus? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
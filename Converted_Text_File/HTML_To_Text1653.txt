C++ algorithm mismatch() function - javatpoint?HomeCC++C#JavaPHPHTMLCSSJavaScriptjQueryXMLJSONAjaxNode.jsSQLQuizProjectsInterview QCommentForumTrainingC++ AlgorithmC++ Algorithm adjacent_find() any_of() copy() copy_if() count() count_if() equal() find() find_end() find_first_of() find_if() find_if_not() for_each() move() all_of() copy_backward() copy_n() search() is_permutation() mismatch() move_backward() none_of() search_n() swap() fill() iter_swap() replace_copy_if() replace_copy() replace_if replace() swap_ranges() transform() fill_n() generate_n() generate() remove() is_partitioned() random_shuffle() remove_copy_if() remove_copy() partition_copy() partition_point() partition() remove_if() reverse_copy() reverse() rotate_copy() rotate() shuffle() stable_partition() unique_copy() unique() is_sorted_until() is_sorted() lower_bound() nth_element() partial_sort_copy() partial_sort() sort() stable_sort() binary_search() equal_range() includes() inplace_merge() merge() set_union() upper_bound() is_heap() is_heap_until lexicographical_compare() make_heap() max() max_element() min() min_element() minmax() minmax_element() next_permutation() pop_heap() prev_permutation() set_difference() set_intersection() set_symmetric_difference() sort_heap()next ? ? prevC++ Algorithm Functions mismatch()C++ Algorithm mismatch() function compares both the containers to spot for any mismatch of values. The function returns the first element of both the containers that does not match.Syntaxtemplate<class InputIterator1, classInputIterator2>
pair<InputIterator1, InputIterator2> mismatch(InputIterator1 first1, InputIterator2 first2>

template<class InputIterator1, class InputIterator2, class BinaryPredicate> pair<InputIterator1,InputIterator2>
mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2,BinaryPredicate pred);Parameterfirst1: It is an input iterator to the first element of the [first1, last1).last1: It is an input iterator to the last element of the [first1, last1).first2: It is an input iterator to the first element of the [first2, last2).pred: It is a binary function that accepts two elements as arguments and performs the task designed by the function.Return valueIf the function finds a pair of elements that does not match then it returns the first pair of such element, one from each container.In case none of the elements from the containers match the the function returns the pair(first1, first2)If the entire element in the pair matches then the function returns a pair of last1 and the element with same respective position to last1 in the second container.Example 1#include<iostream>
#include<algorithm>
#include<vector>
#include<utility>
bool newpredicate(int m, int n)
{
	return(m==n);
}
int main()
{
	std::vector<int> newvector;
	for (int m=1; m<6; m++)
	newvector.push_back(m*10);
	int newints[]={10,20,80,320,1024};
	std::pair<std::vector<int>::iterator,int*> newpair;
	newpair=std::mismatch(newvector.begin(),newvector.end(),newints);
	std::cout<<"Out of the given elements the first mismatching pair is:"<<*newpair.first;
	std::cout<<" and "<<*newpair.second<<"\n";
	++newpair.first; ++newpair.second;
	newpair=std::mismatch(newpair.first, newvector.end(),newpair.second, newpredicate);
	std::cout<<"The next pair of mismatching elements are:"<<*newpair.first;
	std::cout<<" and "<<*newpair.second<<"\n";
	return 0;
}Output:Out of the given elements the first mismatching pair is: 30 and 80
The next pair of mismatching elements are: 40 and 320Example 2#include<iostream>
#include<algorithm> 
#include<vector>
using namespace std;
bool comp(int c, int d)
{   
    return (c>d);
}
 int main()
{
    vector<int> u1 = { 23, 13, 15, 20 };
    vector<int> u2 = { 1, 10, 25, 30, 45 };
    vector<int> u3 = { 12, 100, 152, 204 };
    vector<int> u4 = { 1, 10, 15, 20, 24 };
    pair< vector<int>::iterator,
    vector<int>::iterator > unpair;
     unpair = mismatch(u1.begin(), u1.end(), u2.begin());
     
    
    cout << "From the first container the element that does not match is: ";
    cout << *unpair.first << endl;
     cout << " From the second container the element that does not match container is: ";
    cout << *unpair.second << endl;
    unpair = mismatch(u3.begin(), u3.end(), u4.begin());
    cout << "From first container return value is:";
    cout << *unpair.first << endl;
    cout << " From second container return value is: ";
    cout << *unpair.second << endl;
   }Output:From the first container the element that does not match is: 23                                 
From the second container the element that does not match container is: 1                      
 From firt container return value is:12         
From second container return value is: 1  ComplexityThe function has linear complexity from the first1 element to the last1 element.Data racesObjects in both ranges are accessed.ExceptionsThe function throws an exception if any of the argument throws one.Next TopicC++ Algorithm move backward Function? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
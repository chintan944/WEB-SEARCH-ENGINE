Autowiring in Spring - javatpoint?HomeCore JavaServletJSPStruts2Mail APIHibernateSpringAndroidDesign PatternQuizProjectsInterview QCommentForumSpring TutorialWhat is Spring Spring Modules Spring ApplicationSpring in IDESpring in Myeclipse Spring in EclipseDependency InjectionIOC container Dependency Injection Constructor Injection CI Dependent Object CI with collection CI with collection 2 CI with Map CI with Map2 CI Inheriting Bean Setter Injection SI Dependent Object SI with Collection SI with Collection 2 SI with Map SI with Map 2 CI vs SI Autowiring Factory MethodSpring AOPAOP Concepts Spring1.2 AOP DTD SP AspectJ Annotation SP AspectJ XMLSpring JdbcTemplateJdbcTemplate Example PreparedStatement ResultSetExtractor RowMapper NamedParameter SimpleJdbcTemplateSpring ORMSpring with ORM Spring with Hibernate Spring with JPASPELSpEL Examples Operators in SpEL variable in SpELSpring MVCMVC Introduction Multiple View Page Multiple Controller Model Interface RequestParam AnnotationMVC Form Tag LibraryForm Tag Library Form Text Field Form Radio Button Form Check Box Form Drop-Down ListMVC ApplicationsMVC CRUD Example MVC Pagination Example File Upload ExampleSpring MVC ValidationSpring MVC Validation Regular Expression Validation Number Validation Custom ValidationMVC TilesSpring MVC TilesSpring RemotingRemoting with Spring Spring with RMI Http Invoker Hessian Burlap Spring with JMSSpring OXMSpring with JAXB Spring with Xstream Spring with CastorSpring Java MailSpring Java MailSpring WebSpring with Struts2 Login ExampleSpring Security TutorialSp Security Tutorial Sp Security Introduction Sp Security Features Security Project Modules Sp Security XML Example Sp Security Java Example Sp Security Login Logout Sp Security Custom Login Form-Based Authentication Sp Security Remember Me Security at Method Level Sp Security Tag LibrarySpring + AngularCRUD Example File Upload Example Login & Logout Example Search Field ExampleSpring BootSpring Boot (15+)Spring InterviewInterview QuestionsSpring QuizSpring Quiznext ? ? prevAutowiring in SpringAutowiring feature of spring framework enables you to inject the object dependency implicitly. It internally uses setter or constructor injection.Autowiring can't be used to inject primitive and string values. It works with reference only.Advantage of AutowiringIt requires the less code because we don't need to write the code to inject the dependency explicitly.Disadvantage of AutowiringNo control of programmer.It can't be used for primitive and string values.Autowiring ModesThere are many autowiring modes:No.ModeDescription1)noIt is the default autowiring mode. It means no autowiring bydefault.2)byNameThe byName mode injects the object dependency according to name of the bean. In such case, property name and bean name must be same. It internally calls setter method.3)byTypeThe byType mode injects the object dependency according to type. So property name and bean name can be different. It internally calls setter method.4)constructorThe constructor mode injects the dependency by calling the constructor of the class. It calls the constructor having large number of parameters.5)autodetectIt is deprecated since Spring 3.Example of AutowiringLet's see the simple code to use autowiring in spring. You need to use autowire attribute of bean element to apply the autowire modes.<bean id="a" class="org.sssit.A" autowire="byName"></bean>Let's see the full example of autowiring in spring. To create this example, we have created 4 files.B.javaA.javaapplicationContext.xmlTest.javaB.javaThis class contains a constructor and method only.package org.sssit;
public class B {
B(){System.out.println("b is created");}
void print(){System.out.println("hello b");}
}A.javaThis class contains reference of B class and constructor and method.package org.sssit;
public class A {
B b;
A(){System.out.println("a is created");}
public B getB() {
	return b;
}
public void setB(B b) {
	this.b = b;
}
void print(){System.out.println("hello a");}
void display(){
	print();
	b.print();
}
}applicationContext.xml<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

<bean id="b" class="org.sssit.B"></bean>
<bean id="a" class="org.sssit.A" autowire="byName"></bean>

</beans>Test.javaThis class gets the bean from the applicationContext.xml file and calls the display method.package org.sssit;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class Test {
public static void main(String[] args) {
	ApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");
	A a=context.getBean("a",A.class);
	a.display();
}
}Output:b is created
a is created
hello a
hello b1) byName autowiring modeIn case of byName autowiring mode, bean id and reference name must be same.It internally uses setter injection.<bean id="b" class="org.sssit.B"></bean>
<bean id="a" class="org.sssit.A" autowire="byName"></bean>But, if you change the name of bean, it will not inject the dependency.Let's see the code where we are changing the name of the bean from b to b1.<bean id="b1" class="org.sssit.B"></bean>
<bean id="a" class="org.sssit.A" autowire="byName"></bean>2) byType autowiring modeIn case of byType autowiring mode, bean id and reference name may be different. But there must be only one bean of a type.It internally uses setter injection.<bean id="b1" class="org.sssit.B"></bean>
<bean id="a" class="org.sssit.A" autowire="byType"></bean>In this case, it works fine because you have created an instance of B type. It doesn't matter that you have different bean name than reference name.But, if you have multiple bean of one type, it will not work and throw exception.Let's see the code where are many bean of type B.<bean id="b1" class="org.sssit.B"></bean>
<bean id="b2" class="org.sssit.B"></bean>
<bean id="a" class="org.sssit.A" autowire="byName"></bean>In such case, it will throw exception.3) constructor autowiring modeIn case of constructor autowiring mode, spring container injects the dependency by highest parameterized constructor.If you have 3 constructors in a class, zero-arg, one-arg and two-arg then injection will be performed by calling the two-arg constructor.<bean id="b" class="org.sssit.B"></bean>
<bean id="a" class="org.sssit.A" autowire="constructor"></bean>4) no autowiring modeIn case of no autowiring mode, spring container doesn't inject the dependency by autowiring.<bean id="b" class="org.sssit.B"></bean>
<bean id="a" class="org.sssit.A" autowire="no"></bean>Next TopicDependency Injection with Factory Method? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
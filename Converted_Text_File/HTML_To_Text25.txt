Adapter Pattern - Javatpoint?HomeCore JavaServletJSPStruts2Mail APIHibernateSpringAndroidDesign PatternQuizProjectsInterview QCommentForumDesign PatternsJava Design Patterns1) Creational PatternFactory Method Pattern Abstract Factory Pattern Singleton Pattern Prototype Pattern Builder Pattern Object Pool Pattern2) Structural PatternAdapter Pattern Bridge Pattern Composite Pattern Decorator Pattern Facade Pattern Flyweight Pattern proxy Pattern3) Behavioral PatternChain of Responsibility Command Pattern Interpreter Pattern Iterator Pattern Mediator Pattern Memento Pattern Observer Pattern State Pattern Strategy Pattern Template PatternJ2EE PatternsJEE or J2EE PatternsPresentation LayerIntercepting Filter Pattern Front Controller Patternnext ? ? prevAdapter PatternAdapter Design PatternAdvantage of Adapter DPUsage of Adapter DPUML of Adapter DPExample of Adapter DPAn Adapter Pattern says that just "converts the interface of a class into another interface that a client wants".In other words, to provide the interface according to client requirement while using the services of a class with a different interface.The Adapter Pattern is also known as Wrapper.Advantage of Adapter PatternIt allows two or more previously incompatible objects to interact.It allows reusability of existing functionality.Usage of Adapter pattern:It is used:When an object needs to utilize an existing class with an incompatible interface.When you want to create a reusable class that cooperates with classes which don't have compatible interfaces.When you want to create a reusable class that cooperates with classes which don't have compatible interfaces.Example of Adapter PatternLet's understand the example of adapter design pattern by the above UML diagram.UML for Adapter Pattern:There are the following specifications for the adapter pattern:Target Interface: This is the desired interface class which will be used by the clients.Adapter class: This class is a wrapper class which implements the desired target interface and modifies the specific request available from the Adaptee class.Adaptee class: This is the class which is used by the Adapter class to reuse the existing functionality and modify them for desired use.Client: This class will interact with the Adapter class.Implementation of above UML:Step 1Create a CreditCard interface (Target interface).public interface CreditCard {
	public void giveBankDetails();
	public String getCreditCard();
}// End of the CreditCard interface.Step 2Create a BankDetails class (Adaptee class).File: BankDetails.java// This is the adapter class.
public class BankDetails{
	private String bankName;
	private String accHolderName;
	private long accNumber;
	
	public String getBankName() {
		return bankName;
	}
	public void setBankName(String bankName) {
		this.bankName = bankName;
	}
	public String getAccHolderName() {
		return accHolderName;
	}
	public void setAccHolderName(String accHolderName) {
		this.accHolderName = accHolderName;
	}
	public long getAccNumber() {
		return accNumber;
	}
	public void setAccNumber(long accNumber) {
		this.accNumber = accNumber;
	}
}// End of the BankDetails class.Step 3Create a BankCustomer class (Adapter class).File: BankCustomer.java// This is the adapter class

import java.io.BufferedReader;
import java.io.InputStreamReader;
public class BankCustomer extends BankDetails implements CreditCard {
 public void giveBankDetails(){
  try{
   BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	
   System.out.print("Enter the account holder name :");
   String customername=br.readLine();
   System.out.print("\n");
	
   System.out.print("Enter the account number:");
   long accno=Long.parseLong(br.readLine());
   System.out.print("\n");
	
   System.out.print("Enter the bank name :");
   String bankname=br.readLine();
	
   setAccHolderName(customername);
   setAccNumber(accno);
   setBankName(bankname);
   }catch(Exception e){
		e.printStackTrace();
   }
  }
  @Override
  public String getCreditCard() {
   long accno=getAccNumber();
   String accholdername=getAccHolderName();
   String bname=getBankName();
		
   return ("The Account number "+accno+" of "+accholdername+" in "+bname+ "
                        bank is valid and authenticated for issuing the credit card. ");
  }
}//End of the BankCustomer class.Step 4Create a AdapterPatternDemo class (client class).File: AdapterPatternDemo.java//This is the client class.
public class AdapterPatternDemo {
 public static void main(String args[]){
  CreditCard targetInterface=new BankCustomer();
  targetInterface.giveBankDetails();
  System.out.print(targetInterface.getCreditCard());
 } 
}//End of the BankCustomer class.download this exampleOutputEnter the account holder name :Sonoo Jaiswal

Enter the account number:10001

Enter the bank name :State Bank of India

The Account number 10001 of Sonoo Jaiswal in State Bank of India bank is valid 
and authenticated for issuing the credit card.Next TopicBridge Pattern? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
Cordova Plugins - javatpoint?HomeCordovaJavaScriptHTMLCSSReact NativeReactJSTypeScriptFramework7COASeleniumServletJSPjQueryProjectsInterview QCommentApache CordovaApache Cordova Tutorial Cordova Architecture Cordova PhoneGap Cordova Installation Creating first Application Config.xml file Top Cordova Frameworks for Hybrid Mobile App Development Cordova App TemplatesCordova Plugin APIsCordova Plugins Cordova Plugin Cameranext ? ? prevCordova PluginsA Plugin can be defined as a package of add-on code that is used to enable a Cordova web view to communicate with the native platform. It can offer a JavaScript interface to the native components. Furthermore, it is a reusable component that is in charge of defining connectivity among the native device and platform functionality of an app like a Camera, GPS, etc. All of the main features of the Cordova API are implemented through plugins. Several plugins are available that enable the features of Cordova like bar code scanners, GPS, etc.For each of the supported platforms, plugins consist of a single JavaScript interface along with a native code library. This JavaScript interface can hide various native code implementations. We can also create our own plugins and can share their work with multiple nodes.In the world of Cordova development, we can define plugins as one of the most powerful tools in the Apache framework. Moreover, it is responsible for implementing all the main Cordova API features. All the available plugins can be searched from the Cordova Plugin Search Page that enables features like bar code scanner, NFC communication, etc.What does Cordova plugin consist?A Cordova plugin provides a JavaScript interface to the native components. These plugins consist of various elements that are as follows:Common JavaScript InterfaceA manifest file, i.e., xmlA native codeBasic Structure of Cordova PluginA basic structure of the Cordova plugin defines a hierarchy of the consisting directories from top to bottom level.- Plugin top-level folder— plugin.xml— src/— android/<Java source code>— ios/<Objective-C source code>— www/<JavaScript interface>-package.json— It is the same as a node package that stores metadata of an app like a packagename, version number, description, etc.-README.md — A documentation of the npmjs website.-libs— android/— <consisting of Android libraries>— ios/— <consisting iOS libraries>-hooks- This directory specifies the scripts that can be executed at various plugin/app life cycle events.How do Cordova Plugins work?A Cordova consists of a bridge present between JavaScript and native code. This bridge is responsible for enabling the users to write a native code via a common JavaScript interface.Cordova bridge is also used for mapping all the specific methods exposed by the plugin JavaScript interface into the plugin's native code. You can pass any parameter of a method between JavaScript and native methods.Here, we have defined some functions that are used along with the passed arguments:function(winParam) {}: It is a success callback function that can be executed along with any passed arguments.function(error) {}: It is an error callback function that executes when an operation is not completed successfully."action": It refers to an action name that is being called on the native side.[/* arguments */]: It consists of an array of arguments that are being passed into the native code."service": It mainly defines a service name that is to be called on the native side.Cordova plugin commandSyntaxcordova {plugins} [
    add <plugin-spec> [..] {--searchpath=<directory> | --noregistry | --link | --save | --force} |
    {remove | rm} {<pluginid> | <name>} --save |{list | ls} |save |
]Sub-commandOptionExplanationadd<plugin-spec>It is used for adding the specified plugins.--searchpath<directory>This directory searches the plugins by ID and each of its subdirectories before hitting the registry. There are multiple search paths that can be specified by this option. It represents ':' as a separator for *nix based systems and ';' for Windows.--noregistryThis option does not search the registry for the plugins.--linkIt defines the symbolic link. It is beneficial for plugin development, and the range of the selected file linked varies by platform.--nosaveIt does not save <plugin-spec> as a member of plugin element into config.xml or package.json.--forceThis option is introduced in version 6.1. It forces you to copy the source files from the plugin. It also copies those files that already exist in the target directory.remove--nosaveIt does not remove specified plugins from package.json or config.xmllistIt displays the list of all currently installed plugins.saveIt saves <plugin-spec> of all the currently added plugins to the project.Plugin-specWe can specify various plugins of cordova by following a general syntax that is listed below:Syntax<plugin-spec> : [@scope/]pluginID[@version]|directory|url[#commit-ish][:subdir]ValueDescriptionscopeIt defines the scope of a plugin like scoped npm package.pluginIt shows the plugin id.urlIt generates the Url to a git repository that contains a plugin.xml file.versionIt defines Major.minor.patch version specifier by using the semver.directoryIt defines a directory path that contains a plugin.xml file.commit-ishIt uses the Commit/tag/branch reference. If none is specified, then the “master” is being used.Algorithm for resolving the plugins:When we need to add any new plugin in our project, a command-line interface can resolve the plugins by following the below criteria.First, you have to pass the plugin-spec command in the command prompt.Then, plugin-spec is saved into the xml and package.json file of an app.After saving the file, we can publish the latest plugin version to npm that our current project supports. It applies to only those plugins that consist of their Cordova dependencies in json.Finally, the newest plugin version will be published to npm.Conflicting pluginsSeveral conflicts may occur when using plugins for an app that are as follows:A conflict may arise when adding any new plugin that uses edit-config tags in their plugin.xml file. This tag is mainly used for adding or replacing the attributes of XML elements.If more than one plugins try to manipulate the same XML element, it reflects some issues with the application. When any conflict arises, it is being detected by implementing the conflict detection scheme. This scheme helps to prevent the plugins from being added, so one plugin does not attempt to overwrite another plugin's edit-configAn error message may also occur if it finds any conflict in edit-config. This message restricts the plugins from being added to the platform. Before adding plugins into the platform, all the conflicts must be resolved. A possible option available to resolve the edit-config conflict is to make the changes to the affected plugin.xml so that the same XML element cannot be modified. We can also use an alternative method to use the --force flag to add the plugins forcibly. This method ignores conflict detection and overwrites all of the conflicts with another plugin, so it should be used with caution.Installing Cordova PluginsTo install the Cordova plugins for our application, we must have to follow some manual steps that are as follows:First of all, make sure that we have the Cordova CLI installed in our system. If it is not installed, type the below command in a command prompt:npm install -g cordovaCreate a new Cordova project in a separate directory.cordova create cordova-appWe can add the required platforms where our app runs. Before doing this, we must have to change our default directory to that position where we have installed our app. Type the below command:cd cordova-appAdd the platforms:cordova platform add androidcordova platform add iosNow, search the plugins that you require and install them by using the below commands:cordova plugin search camera     cordova plugin add com.cordova.plugin.cameraFinally, build a Cordova app:cordova build androidcordova build iosBuilding PluginsThe developers use plugin add commands of CLI to add a new plugin to a project. We can pass the URL for a git repository as an argument to these commands. This argument contains the plugin code. For illustration, see the below command:cordova plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-device.gitThe above command implements the Cordova Device API by passing the URL of a git repository as an argument.It should be noted that the plugin repository must feature a top-level plugin.xml manifest file. Several ways are available to configure the manifest file. You can check the available plugins in the official Plugin Specification page. The below code provides a basic example of the version of the Device plugin:<?xml version="1.0" encoding="UTF-8"?>
<plugin xmlns="http://apache.org/cordova/ns/plugins/1.0"
        id="cordova-plugin-device" version="0.2.3">
<name>Device Plugin</name>
<license>Apache 2.0</license>
<keywords>device,cordova</keywords>
<js-module src="www/device.js" name="device">
<clobbers target="device" />
</js-module>
<platform name="android">
<config-file target="config.xml" parent="/*">
<feature name="Device">
<param name="android-package" value="CDVDevice"/>
</feature>
</config-file>
<header-file src="src/android/CDVDevice.h" />
<source-file src="src/android/CDVDevice.m" />
</platform>
</plugin>Let's discuss the following code to understand it better. In the third line of code, we define an id attribute of plugin tag that mainly consists a same reverse domain format for determining the plugin package.In the above code, the js-module tag is used to determine the path to a common JavaScript interface.We have used a platform tag for specifying the corresponding set of native codes. Here, we have used the android config-file tag is also used to encapsulate a feature tag, which will be injected into the platform-specific xml file.Here, we have also used header-file and source-file tags that mainly define the path to the component files of the library.Validate Plugins using Plugman:We can define Plugman as a command-line tool that is used to install and uninstall the plugins. A plugman tool ensures that whether the plugins are properly installed for each platform or not.npm install –g plugmanThe above command is used to install a plugman on the system.We also require a valid app source directory. Thenceforth run a specific command to ensure that iOS dependencies have been loaded properly.plugman install --platform ios --project /path/to/my/project/www --plugin /path/to/my/pluginPublishing PluginsIf you want to publish your plugin to any npmjs-based registry, first, you should have an installed plugman CLI on your system. In the above section, we have specified a command for installing the plugman CLI. You can refer to it if it is not installed on your system.Then, create a package.json file for your plugin. This file is the same as a node package that stores the metadata of an app like the packagename, version number, description, etc.$ plugman createpackagejson /path-of-the-pluginIf you don't have an account of npm, you must need to create an account before publishing a plugin. Finally, publish your plugin by typing the below command:$ npm publish /path-of-the-pluginPlugin APIsThere are different sets of Cordova Plugins available for your application. Some of them are as follows:camera: This plugin is used to provide an interface to enable the device camera. It can also select the images from the device storage.contacts: It allows access to the device contacts.device: It provides an interface to retrieve the information about the hardware and software.file: It enables read/write access to the device files.file-opener2: It opens a particular file on your system with its default application.file-transfer: It is used to upload and download the files to/from the device.geolocation: It is used to access the GPS data and shows the current location of the device, such as latitude and longitude.statusbar: It provides an interface to change the behavior of the status bar when we run our application.push: It is used for receiving the native push notifications.barcodescanner: It is responsible for scanning a barcode using the device camera.customurlscheme: It allows our application to be launched by a URL like myapp://path?foo=bar.emm-app –config: This plugin mainly retrieves Enterprise Mobility Management(EMM).Plugin Caution and CompatibilityThe plugins used in Cordova change in the aspect of quality and implementation. Some plugins are more compatible with a WordPress theme name as Astro. If the plugins have to show their own UIViewController, UI presented plugins should work correctly.Some of the plugins may not work correctly if these plugins manually integrate a UIViews into the view hierarchy. The reason behind this problem is the UIWebView that hosts the Cordova javascript is never visible. The plugins are required to change for using the presentViewController().These plugins may also conflict and shows errors. So, we should use only Cordova plugins from app.js.Next TopicCordova Plugin Camera? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
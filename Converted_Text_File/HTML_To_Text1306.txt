CLR 1 Parsing - javatpoint?HomeCompilerData StructureCC++C#JavaSQLHTMLCSSJavaScriptAjaxAndroidCloudDesign PatternQuizProjectsInterview QCommentCompiler TutorialCompiler Tutorial Compiler Introduction Compiler Phases Compiler Passes Bootstrapping Finite State machine Regular expression Optimization of DFA LEX Formal Grammar BNF Notation YACC Context free Grammars Capabilities of CFG Derivation Parse Tree AmbiguityBasic ParsingParser Shift Reduce Parsing Operator PrecedencePredictive ParsersLR parser LR(0) Items SLR(1) Parsing CLR(1) Parsing LALR(1) Parsing Parser GeneratorSDTSyntax Directed Translation SDT Translation scheme SDT ImplementationIntermediate Code Postfix Notation Parse and syntax trees Three address code Quadruples Triples Assignment statements Boolean expressions Flow altering statements Postfix translation Array references Procedures call Declarations Case StatementsSymbol TablesSymbol Table DS for symbols tables Scope InformationAdministrationStorage Organization Activation Record Storage AllocationError DetectionLexical Error Syntax Error Semantic ErrorCode GenerationCode Generation Design Issues Target Machine Run Time Storage Basic Block Flow Graph Block Optimization Code GeneratorCode OptimizationMachine Independent Loop optimization DAG Representation Data-Flow Analysisnext ? ? prevCLR (1) ParsingCLR refers to canonical lookahead. CLR parsing use the canonical collection of LR (1) items to build the CLR (1) parsing table. CLR (1) parsing table produces the more number of states as compare to the SLR (1) parsing.In the CLR (1), we place the reduce node only in the lookahead symbols.Various steps involved in the CLR (1) Parsing:For the given input string write a context free grammarCheck the ambiguity of the grammarAdd Augment production in the given grammarCreate Canonical collection of LR (0) itemsDraw a data flow diagram (DFA)Construct a CLR (1) parsing tableLR (1) itemLR (1) item is a collection of LR (0) items and a look ahead symbol.LR (1) item = LR (0) item + look aheadThe look ahead is used to determine that where we place the final item.The look ahead always add $ symbol for the argument production.ExampleCLR ( 1 ) GrammarS ? AA
A ? aA
A ? bAdd Augment Production, insert '•' symbol at the first position for every production in G and also add the lookahead.S` ? •S, $
S  ? •AA, $
A  ? •aA, a/b 
A ? •b, a/bI0 State:Add Augment production to the I0 State and Compute the ClosureI0 = Closure (S` ? •S)Add all productions starting with S in to I0 State because "." is followed by the non-terminal. So, the I0 State becomesI0 = S` ? •S, $        S ? •AA, $Add all productions starting with A in modified I0 State because "." is followed by the non-terminal. So, the I0 State becomes.I0=  S` ? •S, $        S ? •AA, $        A ? •aA, a/b        A ? •b, a/bI1= Go to (I0, S) = closure (S` ? S•, $) = S` ? S•, $I2= Go to (I0, A) = closure ( S ? A•A, $ )Add all productions starting with A in I2 State because "." is followed by the non-terminal. So, the I2 State becomesI2= S ? A•A, $       A ? •aA, $       A ? •b, $I3= Go to (I0, a) = Closure ( A ? a•A, a/b )Add all productions starting with A in I3 State because "." is followed by the non-terminal. So, the I3 State becomesI3= A ? a•A, a/b       A ? •aA, a/b       A ? •b, a/bGo to (I3, a) = Closure (A ? a•A, a/b) = (same as I3)Go to (I3, b) = Closure (A ? b•, a/b) = (same as I4)I4= Go to (I0, b) = closure ( A ? b•, a/b) = A ? b•, a/bI5= Go to (I2, A) = Closure (S ? AA•, $) =S ? AA•, $I6= Go to (I2, a) = Closure (A ? a•A, $)Add all productions starting with A in I6 State because "." is followed by the non-terminal. So, the I6 State becomesI6 = A ? a•A, $       A ? •aA, $       A ? •b, $Go to (I6, a) = Closure (A ? a•A, $) = (same as I6)Go to (I6, b) = Closure (A ? b•, $) = (same as I7)I7= Go to (I2, b) = Closure (A ? b•, $) = A ? b•, $I8= Go to (I3, A) = Closure (A ? aA•, a/b) = A ? aA•, a/bI9= Go to (I6, A) = Closure (A ? aA•, $) = A ? aA•, $Drawing DFA:CLR (1) Parsing table:Productions are numbered as follows:     S  ?  AA      ... (1)                                
       A  ? aA       ....(2)   
       A  ?  b     ... (3)The placement of shift node in CLR (1) parsing table is same as the SLR (1) parsing table. Only difference in the placement of reduce node.I4 contains the final item which drives ( A ? b•, a/b), so action {I4, a} = R3, action {I4, b} = R3.I5 contains the final item which drives ( S ? AA•, $), so action {I5, $} = R1.I7 contains the final item which drives ( A ? b•,$), so action {I7, $} = R3.I8 contains the final item which drives ( A ? aA•, a/b), so action {I8, a} = R2, action {I8, b} = R2.I9 contains the final item which drives ( A ? aA•, $), so action {I9, $} = R2.Next TopicLALR (1) Parsing? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
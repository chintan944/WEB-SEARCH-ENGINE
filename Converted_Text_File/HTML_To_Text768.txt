Automata Context-free Grammar | CFG - Javatpoint?HomeCompilerAutomataAWSIoTComputer FundamentalsControl SystemJavaHTMLCSSAptitudeSeleniumKotlinJavaScriptjQueryQuizProjectsInterview QCommentForumTrainingAutomata TutorialAutomata Tutorial Theory of Automata Finite Automata Transition Diagram Transition Table DFA Examples of DFA NFA Examples of NFA Eliminating ? Transitions Conversion from NFA to DFA Conversion from NFA with ? to DFA Minimization of DFARegular ExpressionRegular Expression Examples of Regular Expression Conversion of RE to FA Arden's Theorem Moore Machine Mealy Machine Conversion from Mealy machine to Moore machine Conversion from Moore machine to Mealy machineCFGContext-free Grammar Derivation Derivation Tree Ambiguity in Grammar Unambiguous Grammar Simplification of CFG Chomsky's Normal Form (CNF) Greibach Normal Form (GNF)PDAPushdown Automata PDA Acceptance Non-deterministic Pushdown Automata CFG to PDA ConversionTuring MachineAutomata Turing Machine Basic Model of Turing machine Language accepted by Turing machine Example of TM Introduction to Undecidability Undecidable Problem about TM Post Correspondence Problem Chomsky Hierarchynext ? ? prevContext-Free Grammar (CFG)CFG stands for context-free grammar. It is is a formal grammar which is used to generate all possible patterns of strings in a given formal language. Context-free grammar G can be defined by four tuples as:G = (V, T, P, S)Where,G is the grammar, which consists of a set of the production rule. It is used to generate the string of a language.T is the final set of a terminal symbol. It is denoted by lower case letters.V is the final set of a non-terminal symbol. It is denoted by capital letters.P is a set of production rules, which is used for replacing non-terminals symbols(on the left side of the production) in a string with other terminal or non-terminal symbols(on the right side of the production).S is the start symbol which is used to derive the string. We can derive the string by repeatedly replacing a non-terminal by the right-hand side of the production until all non-terminal have been replaced by terminal symbols.Example 1:Construct the CFG for the language having any number of a's over the set ?= {a}.Solution:As we know the regular expression for the above language isr.e. = a*   Production rule for the Regular expression is as follows:S ? aS    rule 1
S ? ?     rule 2Now if we want to derive a string "aaaaaa", we can start with start symbols. S
aS 
aaS          rule 1
aaaS         rule 1
aaaaS        rule 1
aaaaaS       rule 1
aaaaaaS      rule 1
aaaaaa?      rule 2
aaaaaaThe r.e. = a* can generate a set of string {?, a, aa, aaa,.....}. We can have a null string because S is a start symbol and rule 2 gives S ? ?.Example 2:Construct a CFG for the regular expression (0+1)*Solution:The CFG can be given by,Production rule (P):
S ? 0S | 1S
S ? ?The rules are in the combination of 0's and 1's with the start symbol. Since (0+1)* indicates {?, 0, 1, 01, 10, 00, 11, ....}. In this set, ? is a string, so in the rule, we can set the rule S ? ?.Example 3:Construct a CFG for a language L = {wcwR | where w € (a, b)*}.Solution:The string that can be generated for a given language is {aacaa, bcb, abcba, bacab, abbcbba, ....}The grammar could be:S ? aSa     rule 1
S ? bSb     rule 2
S ? c       rule 3Now if we want to derive a string "abbcbba", we can start with start symbols.S ? aSa 
S ? abSba       from rule 2
S ? abbSbba     from rule 2
S ? abbcbba     from rule 3Thus any of this kind of string can be derived from the given production rules.Example 4:Construct a CFG for the language L = anb2n where n>=1.Solution:The string that can be generated for a given language is {abb, aabbbb, aaabbbbbb....}.The grammar could be:S ? aSbb | abbNow if we want to derive a string "aabbbb", we can start with start symbols.S ? aSbb
S ? aabbbb	Next TopicDerivation? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
Chain of Responsibility Pattern - Javatpoint?HomeCore JavaServletJSPStruts2Mail APIHibernateSpringAndroidDesign PatternQuizProjectsInterview QCommentForumDesign PatternsJava Design Patterns1) Creational PatternFactory Method Pattern Abstract Factory Pattern Singleton Pattern Prototype Pattern Builder Pattern Object Pool Pattern2) Structural PatternAdapter Pattern Bridge Pattern Composite Pattern Decorator Pattern Facade Pattern Flyweight Pattern proxy Pattern3) Behavioral PatternChain of Responsibility Command Pattern Interpreter Pattern Iterator Pattern Mediator Pattern Memento Pattern Observer Pattern State Pattern Strategy Pattern Template PatternJ2EE PatternsJEE or J2EE PatternsPresentation LayerIntercepting Filter Pattern Front Controller Patternnext ? ? prevChain Of Responsibility PatternChain Of Responsibility PatternAdvantage of Chain Of Responsibility DPUsage of Chain Of Responsibility DPUML of Chain Of Responsibility DPExample of Chain Of Responsibility DPIn chain of responsibility, sender sends a request to a chain of objects. The request can be handled by any object in the chain.A Chain of Responsibility Pattern says that just "avoid coupling the sender of a request to its receiver by giving multiple objects a chance to handle the request". For example, an ATM uses the Chain of Responsibility design pattern in money giving process.In other words, we can say that normally each receiver contains reference of another receiver. If one object cannot handle the request then it passes the same to the next receiver and so on.Advantage of Chain of Responsibility PatternIt reduces the coupling.It adds flexibility while assigning the responsibilities to objects.It allows a set of classes to act as one; events produced in one class can be sent to other handler classes with the help of composition.Usage of Chain of Responsibility Pattern:It is used:When more than one object can handle a request and the handler is unknown.When the group of objects that can handle the request must be specified in dynamic way.Example of Chain of Responsibility PatternLet's understand the example of Chain of Responsibility Pattern by the above UML diagram.UML for Chain of Responsibility Pattern:Implementation of above UML:Step 1Create a Logger abstract class.public abstract class Logger {
	public static int OUTPUTINFO=1;
	public static int ERRORINFO=2;
	public static int DEBUGINFO=3;
	protected int levels;
	protected Logger nextLevelLogger;
	public void setNextLevelLogger(Logger nextLevelLogger) {
		this.nextLevelLogger = nextLevelLogger;
	}
        public void logMessage(int levels, String msg){
		if(this.levels<=levels){
			displayLogInfo(msg);
		}
		if (nextLevelLogger!=null) {
			nextLevelLogger.logMessage(levels, msg);
		}
	}
	protected abstract void displayLogInfo(String msg);
}Step 2Create a ConsoleBasedLogger class.File: ConsoleBasedLogger.javapublic class ConsoleBasedLogger extends Logger {
	public ConsoleBasedLogger(int levels) {
		this.levels=levels;
	}
	@Override
	protected void displayLogInfo(String msg) {
		System.out.println("CONSOLE LOGGER INFO: "+msg);
	}
}Step 3Create a DebugBasedLogger class.File: DebugBasedLogger.javapublic class DebugBasedLogger extends Logger {
	public DebugBasedLogger(int levels) {
		this.levels=levels;
	}
	@Override
	protected void displayLogInfo(String msg) {
		System.out.println("DEBUG LOGGER INFO: "+msg);
	}
}// End of the DebugBasedLogger class.Step 4Create a ErrorBasedLogger class.File: ErrorBasedLogger.javapublic class ErrorBasedLogger extends Logger {
	public ErrorBasedLogger(int levels) {
		this.levels=levels;
	}
	@Override
	protected void displayLogInfo(String msg) {
		System.out.println("ERROR LOGGER INFO: "+msg);
	}
}// End of the ErrorBasedLogger class.Step 5Create a ChainOfResponsibilityClient class.File: ChainofResponsibilityClient.javapublic class ChainofResponsibilityClient {
	private static Logger doChaining(){
	      Logger consoleLogger = new ConsoleBasedLogger(Logger.OUTPUTINFO);
	      
	      Logger errorLogger = new ErrorBasedLogger(Logger.ERRORINFO);
	      consoleLogger.setNextLevelLogger(errorLogger);
	      
	      Logger debugLogger = new DebugBasedLogger(Logger.DEBUGINFO);
	      errorLogger.setNextLevelLogger(debugLogger);
	      
	      return consoleLogger;	
	      }
	      public static void main(String args[]){
	      Logger chainLogger= doChaining();

              chainLogger.logMessage(Logger.OUTPUTINFO, "Enter the sequence of values ");
              chainLogger.logMessage(Logger.ERRORINFO, "An error is occured now");
              chainLogger.logMessage(Logger.DEBUGINFO, "This was the error now debugging is compeled");
              }
}download this exampleOutputbilityClient
CONSOLE LOGGER INFO: Enter the sequence of values
CONSOLE LOGGER INFO: An error is occured now
ERROR LOGGER INFO: An error is occured now
CONSOLE LOGGER INFO: This was the error now debugging is compeled
ERROR LOGGER INFO: This was the error now debugging is compeled
DEBUG LOGGER INFO: This was the error now debugging is compeledNext TopicCommand Design Pattern in Java? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
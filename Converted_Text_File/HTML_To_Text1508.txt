Computer Network | Error Correction - javatpoint?HomeComputer FundamentalsComputer NetworkControl SystemJavaHTMLCSSSeleniumJavaScriptjQueryQuizProjectsInterview QCommentForumTrainingComputer NetworkTutorial Introduction Features Architecture Components Computer Network Types Topologies Transmission ModesModelsModels OSI Model TCP/IP ModelPhysical LayerDigital Transmission Transmission Media Guided Media UnGuided Media Multiplexing Multiplexing Techniques Switching Switching Modes Switching TechniquesData Link layerData Link layer Error Detection Error Correction Data Link ControlsNetwork LayerNetwork Layer Network Addressing Routing Network Layer ProtocolsRouting AlgorithmRouting Algorithm Distance Vector Link State RoutingTransport LayerTransport Layer Transport Layer ProtocolsApplication LayerApplication Layer Client & Server ModelApplication ProtocolsDNS FTP Telnet SMTP SNMP HTTPNetwork SecuritySecurity Privacy Digital Signature PGPMiscWhat is RouterInterview QuestionsNetworking Questionsnext ? ? prevError CorrectionError Correction codes are used to detect and correct the errors when data is transmitted from the sender to the receiver.Error Correction can be handled in two ways:Backward error correction: Once the error is discovered, the receiver requests the sender to retransmit the entire data unit.Forward error correction: In this case, the receiver uses the error-correcting code which automatically corrects the errors.A single additional bit can detect the error, but cannot correct it.For correcting the errors, one has to know the exact position of the error. For example, If we want to calculate a single-bit error, the error correction code will determine which one of seven bits is in error. To achieve this, we have to add some additional redundant bits.Suppose r is the number of redundant bits and d is the total number of the data bits. The number of redundant bits r can be calculated by using the formula:2r>=d+r+1The value of r is calculated by using the above formula. For example, if the value of d is 4, then the possible smallest value that satisfies the above relation would be 3.To determine the position of the bit which is in error, a technique developed by R.W Hamming is Hamming code which can be applied to any length of the data unit and uses the relationship between data units and redundant units.Hamming CodeParity bits: The bit which is appended to the original data of binary bits so that the total number of 1s is even or odd.Even parity: To check for even parity, if the total number of 1s is even, then the value of the parity bit is 0. If the total number of 1s occurrences is odd, then the value of the parity bit is 1.Odd Parity: To check for odd parity, if the total number of 1s is even, then the value of parity bit is 1. If the total number of 1s is odd, then the value of parity bit is 0.Algorithm of Hamming code:An information of 'd' bits are added to the redundant bits 'r' to form d+r.The location of each of the (d+r) digits is assigned a decimal value.The 'r' bits are placed in the positions 1,2,.....2k-1.At the receiving end, the parity bits are recalculated. The decimal value of the parity bits determines the position of an error.Relationship b/w Error position & binary number.Let's understand the concept of Hamming code through an example:Suppose the original data is 1010 which is to be sent.Total number of data bits 'd' = 4
Number of redundant bits r : 2r >= d+r+1
                           2r>= 4+r+1
Therefore, the value of r is 3 that satisfies the above relation.
Total number of bits = d+r = 4+3 = 7;
Determining the position of the redundant bitsThe number of redundant bits is 3. The three bits are represented by r1, r2, r4. The position of the redundant bits is calculated with corresponds to the raised power of 2. Therefore, their corresponding positions are 1, 21, 22.The position of r1 = 1
The position of r2 = 2
The position of r4 = 4Representation of Data on the addition of parity bits:Determining the Parity bitsDetermining the r1 bitThe r1 bit is calculated by performing a parity check on the bit positions whose binary representation includes 1 in the first position.We observe from the above figure that the bit positions that includes 1 in the first position are 1, 3, 5, 7. Now, we perform the even-parity check at these bit positions. The total number of 1 at these bit positions corresponding to r1 is even, therefore, the value of the r1 bit is 0.Determining r2 bitThe r2 bit is calculated by performing a parity check on the bit positions whose binary representation includes 1 in the second position.We observe from the above figure that the bit positions that includes 1 in the second position are 2, 3, 6, 7. Now, we perform the even-parity check at these bit positions. The total number of 1 at these bit positions corresponding to r2 is odd, therefore, the value of the r2 bit is 1.Determining r4 bitThe r4 bit is calculated by performing a parity check on the bit positions whose binary representation includes 1 in the third position.We observe from the above figure that the bit positions that includes 1 in the third position are 4, 5, 6, 7. Now, we perform the even-parity check at these bit positions. The total number of 1 at these bit positions corresponding to r4 is even, therefore, the value of the r4 bit is 0.Data transferred is given below:Suppose the 4th bit is changed from 0 to 1 at the receiving end, then parity bits are recalculated.R1 bitThe bit positions of the r1 bit are 1,3,5,7We observe from the above figure that the binary representation of r1 is 1100. Now, we perform the even-parity check, the total number of 1s appearing in the r1 bit is an even number. Therefore, the value of r1 is 0.R2 bitThe bit positions of r2 bit are 2,3,6,7.We observe from the above figure that the binary representation of r2 is 1001. Now, we perform the even-parity check, the total number of 1s appearing in the r2 bit is an even number. Therefore, the value of r2 is 0.R4 bitThe bit positions of r4 bit are 4,5,6,7.We observe from the above figure that the binary representation of r4 is 1011. Now, we perform the even-parity check, the total number of 1s appearing in the r4 bit is an odd number. Therefore, the value of r4 is 1.The binary representation of redundant bits, i.e., r4r2r1 is 100, and its corresponding decimal value is 4. Therefore, the error occurs in a 4th bit position. The bit value must be changed from 1 to 0 to correct the error.Next Topic#? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
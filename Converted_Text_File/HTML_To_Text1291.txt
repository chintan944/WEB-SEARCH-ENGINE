Load Balancing with Ribbon - javatpoint?HomeMicroservicesCore JavaServletJSPStruts2HibernateSpringAndroidDesign PatternQuizProjectsInterview QCommentForumMicroservices TutorialMicroservices Tutorial Advantages and Disadvantages of Microservices Challenges of Microservices Architecture Difference between MSA and SOA Microservices Monitoring and Virtualization Tool Microservices Components and Standardizing Port and URL Creating a Simple Microservice Setting up Spring Cloud Config Server Connect Spring Cloud Config Server to Local Git Repository Introduction to Currency Conversion and Currency Exchange Service Configure JPA and Initialized Data Creating a JPA Repository Setting up Currency Conversion Microservice Invoking Currency Exchange Microservice from Currency Conversion Microservice Using Feign REST Client for Service Invocation Client Side Load Balancing with Ribbon Eureka Naming Server Connecting Microservice to Eureka Distributing Calls Using Eureka and Ribbon Introduction to API Gateway Zuul API Gateway Implementing Zuul Logging Filter Executing a Request through Zuul API Gateway Introduction to Distributed Tracing Installing RabbitMQ Server Distributed Tracing with Zipkin Connecting Microservices to Zipkin Understanding the need for Spring Cloud Bus Implementing Spring Cloud Bus Fault Tolerance with Hystrixnext ? ? prevClient-Side Load Balancing with RibbonNetflix RibbonNetflix Ribbon is a Part of Netflix Open Source Software (Netflix OSS). It is a cloud library that provides the client-side load balancing. It automatically interacts with Netflix Service Discovery (Eureka) because it is a member of the Netflix family.The Ribbon mainly provides client-side load balancing algorithms. It is a client-side load balancer that provides control over the behavior of HTTP and TCP client. The important point is that when we use Feign, the Ribbon also applies.Features of RibbonLoad balancingFault toleranceMultiple protocol support in Asynchronous modelCaching and batchingModulesribbon: It is an API that integrates load balancing, fault-tolerance, caching, andribbon-loadbalancer: It is a Load balancer API that can be used independently or with other modules.ribbon eureka: It uses Eureka client that provides a dynamic server list for the Spring Cloud.ribbon-transport: It is a transport client that supports HTTP, TCP, and UDP These protocols use RxNetty with load balancing capability.ribbon-httpclient: It is a REST client built on top of Apache HttpClient integrated with load balancers.ribbon-core: It is a Client Configuration API.Types of Load Balancing:There are two types of load balancingServer Side Load Balancing: Server side load balancing is a monolithic It applies between the client and the server. It accepts incoming network, application traffic, and distributes the traffic across the multiple backend servers by using various methods. The middle component is responsible for distributing the client requests to the server.Client-Side Load Balancing: The client holds the list of server’s IPs so that it can deliver the requests. The client selects an IP from the list, randomly, and forwards the request to the server.Let's configure the Ribbon server in our project.Step 1: Go to the project currency-conversion-service.Step 2: Open pom.xml file and add the ribbon dependency.<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
</dependency>After adding the dependency, we need to enable ribbon on the proxy.Step 3: Open the CurrencyExchangeServiceProxy.java file. Enable Ribbon by adding an annotation @RibbonClient and specify the name of the service which we want to talk to. Ribbon client provide the declarative configuration for a client.@RibbonClient(name="currency-exchange-service")CurrencyExchangeServiceProxy.javapackage com.javatpoint.microservices.currencyconversionservice;
import org.springframework.cloud.netflix.ribbon.RibbonClient;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
//@FeignClient(name="currency-exchange-service", url="localhost:8000")
//Enabling feign
@FeignClient(name="currency-exchange-service")
//enabling ribbon
@RibbonClient(name="currency-exchange-service")
public interface CurrencyExchangeServiceProxy 
{
@GetMapping("/currency-exchange/from/{from}/to/{to}")		//where {from} and {to} are path variable
public CurrencyConversionBean retrieveExchangeValue(@PathVariable("from") String from, @PathVariable("to") String to); //from map to USD and to map to INR
}Step 4: In the annotation @FeignClient, remove the attribute URL. Because we do not need to talk with one particular service. We will configure that URL in the application.properties file.Step 5: Open the application.properties file of the project currency-conversion-service and configure the servers. The property that we have to configure is:name-of-the-application.ribbon.listOfServers=URLsWe have configured the two instances of currency-exchange-service that we want to invoke.currency-exchange-service.ribbon.listOfServers=http://localhost:8000, http://localhost:8001application.propertiesspring.application.name=currency-conversion-service
server.port=8100
currency-exchange-service.ribbon.listOfServers=http://localhost:8000, http://localhost:8001Running Client Side Load Balancing with RibbonWe have two instances of CurrentlyExchangeServiceApplication.java, as shown in the following image:First, run the CurrencyExchangeServiceApplication on port 8000 and then run the CurrencyExchangeServiceApplication on port 8001.After running the CurrencyExchangeServiceApplication on both the ports, run the CurrencyConversionServiceApplication.java by sending the request http://localhost:8100/currency-converter-feign/from/EUR/to/INR/quantity/10000. It returns the following response.In the above image, the port 8000 represents that the currency-exchange-service is running on port 8000 and handling the current request.Now, refresh the page. We get the same response except for the port number and quantity because we have changed the quantity in the request.In the above image, the port 8001 represents that the currency-exchange-service is running on port 8001 and handling the current request.Let's understand the load balancing through a figure:In the above figure, Ribbon is distributing the load between three active CurrencyExchangeServices. The CurrencyExchangeService1 is running on port 8000, and CurrencyExchangeService2 is running on port 8001, and so on. So whatever calls are made using Ribbon through the CurrencyCalculationService, are distributed among these three services.Click here to download currency-conversion-serviceClick here to download currency-exchange-serviceNext TopicEureka Naming Server? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
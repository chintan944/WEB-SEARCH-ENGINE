Algorithms and Functions - javatpoint?HomeDBMSDSDMSDAAGraph TheoryControl SystemAptitudeSeleniumKotlinC#HTMLCSSJavaScriptjQueryQuizProjectsInterview QCommentForumTrainingDiscrete MathematicsDiscrete MathematicsSets TheorySets Introduction Types of Sets Sets Operations Algebra of Sets Multisets Inclusion-Exclusion Principle Mathematical InductionRelationsBinary Relation Representation of Relations Composition of Relations Types of Relations Closure Properties of Relations Equivalence Relations Partial Ordering RelationsFunctions & AlgorithmsFunctions Types of Functions Identity Functions Composition of Functions Mathematical Functions Algorithms & FunctionsLogic & PropositionalPropositions & Compound Statements Basic Logical Operations Conditional & Biconditional Statements Tautologies & Contradictions Predicate Logic Normal FormsCounting TechniquesBasic Counting Principles Permutations & Combinations Pigeonhole PrincipleRecurrence RelationsRecurrence Relations Linear Recurrence Relations with Constant Coefficients Particular Solution Total Solution Generating FunctionsProbability TheoryProbability Addition Theorem Multiplication Theorem Conditional ProbabilityGraph TheoryIntroduction of Graphs Types of Graphs Representation of Graphs Isomorphic and Homeomorphic Graphs Regular and Bipartite Graphs Planar and Non-Planar Graphs Dijkstra's Algorithm Travelling Salesman ProblemBinary TreesIntroduction of Trees Binary Trees Traversing Binary Trees Binary Search Trees Minimum Spanning TreeOperator & PostulatesBinary Operation Property of Binary OperationsGroup TheorySemiGroup Group SubGroup Normal SubgroupOrdered Sets & LatticesPartially Ordered Sets Hasse Diagrams LatticesBoolean AlgebraBoolean Algebra Boolean Expression Canonical Forms Logic Gates & Circuits Karnaugh Mapsnext ? ? prevAlgorithms and FunctionsAlgorithm: An algorithm is a step-by-step method for solving some problem.Characteristics of Algorithms:Algorithms generally have the following characteristics:Input: The algorithm receives input. Zero or more quantities are externally supplied.Output: The algorithm produces output. At least one quantity is produced.Precision: The steps are precisely stated. Each instruction is clear and unambiguous.Feasibility: It must be feasible to execute each instruction.Flexibility: It should also be possible to make changes in the algorithm without putting so much effort on it.Generality: The algorithm applies to a set of inputs.Finiteness: Algorithm must complete after a finite number of instruction have been executed.Analysis (Complexity) of AlgorithmsThe Analysis of an algorithm refers to the process of deriving estimates for the time and space needed to execute the algorithm.It is important to estimate the time (e.g., the number of steps) and space (e.g., the number of variables) required by algorithms. Knowing the time and space required by algorithm allows us to compare the algorithms that solve the same problem. For example, if one algorithm takes n steps to solve a problem and another algorithm takes n^2 steps to solve the same problem, we would prefer the first algorithm. This estimation of time and space needed to execute the algorithm is called the time and space complexity of the algorithm.      The time required to execute an algorithm is a function of the input. Instead of dealing directly with the input, parameters are used to characterize the size of the input. e.g. if the input is a set containing n elements, the size of the input n. There are three cases worth noting about the time complexity of an algorithm since determining the exact time complexity of an algorithm in a difficult task.Worst-case: f (n) represent by the maximum number of steps taken on any instance of size n.Best-case: f (n) represent by the minimum number of steps taken on any instance of size n.Average case: f (n) represent by the average number of steps taken on any instance of size n.Asymptotic NotationsAsymptotic Notations are used to describe the execution time of an algorithm. The notations show the order of growth of functions. Here the time taken by an algorithm is mapped regarding mathematical functions. There are many asymptotic notations like 0, ?, ?,w each having its importance.1. Big-oh notation: The function f (n) =O (g (n)) [read as "f of n is big-oh of g of n"] if and only if exist positive constant c and n0 such thatf (n) ? C x g (n) for all n, n ? n0
Example1: The function 4n + 3 = O (n) as 4n + 3 ? 5n for all n ?.Example2: The function 20n2 + 5n + 2 = O (n2) as 20n2+ 5n +2?21n2 for all n ?.2. Omega (?) Notation: The function f (n) = ? (g (n)) [read as "f of n is omega of g of n"] if and only if there exists positive constant c and n0 such thatf (n) ? C* g (n) for all n, n ? n0
Example1: The function 4n + 3 = ? (n) as 4n + 3 ? 4n for all n ?1.Example2: The function 20n2+ 5n +2 = ? (n) as 20n2+ 5n +2 ? 20n2 for all n ?1.3. Theta (?): The function f (n) = ? (g (n)) [read as "f is the theta of g of n"] if and only if there exists positive constant k1, k2 and k0 such thatk1* g (n) ? f (n)?k2* g(n)for all n, n?n0
Example1: The function 4n + 3 = ? (n) as 4n + 3 ? 4n for all n ? 3 and 4n + 3 ? 5n for all n ? 3.Example2: The function 20n2+ 5n +2 = ? (n2) as 20n2+ 5n +2 ? 21n2 for all n ?1 and 20n2+ 5n +2 ? 20n2 for all n ? 1.Next TopicProposition and Compound Statements? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
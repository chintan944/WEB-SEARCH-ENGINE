Unification in First-order logic - Javatpoint?HomeDBMSAIBlockchainHTMLCSSJavaScriptSeleniumDSControl SystemJavaSeleniumjQueryQuizProjectsInterview QCommentForumTrainingAI TutorialAI Tutorial AI Introduction Application of AI History of AI Types of AIIntelligent AgentTypes of Agents Intelligent Agent Agent Environment Turing Test in AIProblem-solvingSearch Algorithms Uninformed Search Algorithm Informed Search Algorithms Hill Climbing Algorithm Means-Ends AnalysisAdversarial SearchAdversarial search Minimax Algorithm Alpha-Beta PruningKnowledge RepresentKnowledge Based Agent Knowledge Representation Knowledge Representation Techniques Propositional Logic Rules of Inference The Wumpus world knowledge-base for Wumpus World First-order logic Knowledge Engineering in FOL Inference in First-Order Logic Unification in FOL Resolution in FOL Forward Chaining and backward chaining Backward Chaining vs Forward Chaining Reasoning in AI Inductive vs. Deductive reasoningUncertain Knowledge R.Probabilistic Reasoning in AI Bayes theorem in AI Bayesian Belief NetworkSubsets of AISubsets of AI Expert Systems Machine Learning Tutorial NLP TutorialRelated TutorialsTensorflow Tutorial PyTorch Tutorial Data Science Tutorial Reinforcement Learningnext ? ? prevWhat is Unification?Unification is a process of making two different logical atomic expressions identical by finding a substitution. Unification depends on the substitution process.It takes two literals as input and makes them identical using substitution.Let ?1 and ?2 be two atomic sentences and ? be a unifier such that, ?1? = ?2?, then it can be expressed as UNIFY(?1, ?2).Example: Find the MGU for Unify{King(x), King(John)}Let ?1 = King(x), ?2 = King(John),Substitution ? = {John/x} is a unifier for these atoms and applying this substitution, and both expressions will be identical.The UNIFY algorithm is used for unification, which takes two atomic sentences and returns a unifier for those sentences (If any exist).Unification is a key component of all first-order inference algorithms.It returns fail if the expressions do not match with each other.The substitution variables are called Most General Unifier or MGU.E.g. Let's say there are two different expressions, P(x, y), and P(a, f(z)).In this example, we need to make both above statements identical to each other. For this, we will perform the substitution.            P(x, y)......... (i)            P(a, f(z))......... (ii)Substitute x with a, and y with f(z) in the first expression, and it will be represented as a/x and f(z)/y.With both the substitutions, the first expression will be identical to the second expression and the substitution set will be: [a/x, f(z)/y].Conditions for Unification:Following are some basic conditions for unification:Predicate symbol must be same, atoms or expression with different predicate symbol can never be unified.Number of Arguments in both expressions must be identical.Unification will fail if there are two similar variables present in the same expression.Unification Algorithm:Algorithm: Unify(?1, ?2) Step. 1: If ?1 or ?2 is a variable or constant, then:
	a) If ?1 or ?2 are identical, then return NIL. 
	b) Else if ?1is a variable, 
		a. then if ?1 occurs in ?2, then return FAILURE
		b. Else return { (?2/ ?1)}.
	c) Else if ?2 is a variable, 
		a. If ?2 occurs in ?1 then return FAILURE,
		b. Else return {( ?1/ ?2)}. 
	d) Else return FAILURE. 
Step.2: If the initial Predicate symbol in ?1 and ?2 are not same, then return FAILURE.
Step. 3: IF ?1 and ?2 have a different number of arguments, then return FAILURE.
Step. 4: Set Substitution set(SUBST) to NIL. 
Step. 5: For i=1 to the number of elements in ?1. 
	a) Call Unify function with the ith element of ?1 and ith element of ?2, and put the result into S.
	b) If S = failure then returns Failure
	c) If S ? NIL then do,
		a. Apply S to the remainder of both L1 and L2.
		b. SUBST= APPEND(S, SUBST). 
Step.6: Return SUBST. Implementation of the AlgorithmStep.1: Initialize the substitution set to be empty.Step.2: Recursively unify atomic sentences:Check for Identical expression match.If one expression is a variable vi, and the other is a term ti which does not contain variable vi, then:Substitute ti / vi in the existing substitutionsAdd ti /vi to the substitution setlist.If both the expressions are functions, then function name must be similar, and the number of arguments must be the same in both the expression.For each pair of the following atomic sentences find the most general unifier (If exist).1. Find the MGU of {p(f(a), g(Y)) and p(X, X)}             Sol: S0 => Here, ?1 = p(f(a), g(Y)), and ?2 = p(X, X)                  SUBST ?= {f(a) / X}                  S1 => ?1 = p(f(a), g(Y)), and ?2 = p(f(a), f(a))                  SUBST ?= {f(a) / g(y)}, Unification failed.Unification is not possible for these expressions.2. Find the MGU of {p(b, X, f(g(Z))) and p(Z, f(Y), f(Y))}Here, ?1 = p(b, X, f(g(Z))) , and ?2 = p(Z, f(Y), f(Y))S0 => { p(b, X, f(g(Z))); p(Z, f(Y), f(Y))}SUBST ?={b/Z}S1 => { p(b, X, f(g(b))); p(b, f(Y), f(Y))}SUBST ?={f(Y) /X}S2 => { p(b, f(Y), f(g(b))); p(b, f(Y), f(Y))}SUBST ?= {g(b) /Y}S2 => { p(b, f(g(b)), f(g(b)); p(b, f(g(b)), f(g(b))} Unified Successfully.And Unifier = { b/Z, f(Y) /X , g(b) /Y}.3. Find the MGU of {p (X, X), and p (Z, f(Z))}Here, ?1 = {p (X, X), and ?2 = p (Z, f(Z))S0 => {p (X, X), p (Z, f(Z))}SUBST ?= {X/Z}              S1 => {p (Z, Z), p (Z, f(Z))}SUBST ?= {f(Z) / Z}, Unification Failed.Hence, unification is not possible for these expressions.4. Find the MGU of UNIFY(prime (11), prime(y))Here, ?1 = {prime(11) , and ?2 = prime(y)}S0 => {prime(11) , prime(y)}SUBST ?= {11/y}S1 => {prime(11) , prime(11)} , Successfully unified.              Unifier: {11/y}.5. Find the MGU of Q(a, g(x, a), f(y)), Q(a, g(f(b), a), x)}Here, ?1 = Q(a, g(x, a), f(y)), and ?2 = Q(a, g(f(b), a), x)S0 => {Q(a, g(x, a), f(y)); Q(a, g(f(b), a), x)}SUBST ?= {f(b)/x}S1 => {Q(a, g(f(b), a), f(y)); Q(a, g(f(b), a), f(b))}SUBST ?= {b/y}S1 => {Q(a, g(f(b), a), f(b)); Q(a, g(f(b), a), f(b))}, Successfully Unified.Unifier: [a/a, f(b)/x, b/y].6. UNIFY(knows(Richard, x), knows(Richard, John))Here, ?1 = knows(Richard, x), and ?2 = knows(Richard, John)S0 => { knows(Richard, x); knows(Richard, John)}SUBST ?= {John/x}S1 => { knows(Richard, John); knows(Richard, John)}, Successfully Unified.Unifier: {John/x}.Next TopicResolution in FOL? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
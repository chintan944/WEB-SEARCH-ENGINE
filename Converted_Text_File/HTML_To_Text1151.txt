C Pointers - javatpoint?HomeCC++C#JavaSQLHTMLCSSJavaScriptXMLAjaxAndroidCloudDesign PatternQuizProjectsInterview QCommentForumC/C++ TrainingC TutorialWhat is C Language History of C Features of C How to install C First C Program Compilation Process in C printf scanf Variables in C Data Types in c Keywords in c C Identifiers C Operators C Comments C Format Specifier C Escape Sequence ASCII value in C Constants in C Literals in C Tokens in C C Boolean Static in C Programming Errors in C Conditional Operator in C Bitwise Operator in C 2s complement in C C Fundamental TestC Control StatementsC if-else C switch if-else vs switch C Loops C do-while loop C while loop C for loop Nested Loops in C Infinite Loop in C C break C continue C goto Type Casting C Control Statement TestC FunctionsWhat is function Call: Value & Reference Recursion in c Storage Classes C Functions TestC Array1-D Array 2-D Array Return an Array in C Array to Function C Array TestC PointersC Pointers C Pointer to Pointer C Pointer Arithmetic Dangling Pointers in C sizeof() operator in C const Pointer in C void pointer in C C Dereference Pointer Null Pointer in C C Function Pointer C Pointers TestC Dynamic MemoryDynamic memoryC StringsString in C C gets() & puts() C String Functions C strlen() C strcpy() C strcat() C strcmp() C strrev() C strlwr() C strupr() C strstr() C String TestC MathC Math FunctionsC Structure UnionC Structure typedef in C C Array of Structures C Nested Structure C Union C Structure TestC File HandlingC File Handling C fprintf() fscanf() C fputc() fgetc() C fputs() fgets() C fseek() C rewind() C ftell()C PreprocessorC Preprocessor C Macros C #include C #define C #undef C #ifdef C #ifndef C #if C #else C #error C #pragma C Preprocessor TestC Command LineCommand Line ArgumentsC MiscC Expressions Data Segments Flow of C Program Classification of Programming LanguagesC Programming TestC Programming TestC ProgramsTop 10+ C Programs Fibonacci Series Prime Number Palindrome Number Factorial Armstrong Number Sum of digits Count the number of digits in C Reverse Number Swap Number Print "Hello" without ; Assembly code in C C program without main Matrix Multiplication Decimal to Binary Number in Characters Alphabet Triangle Number Triangle Fibonacci Triangle Hexadecimal to Binary Hexadecimal to Decimal Strong number in C Star Program in CMathPrime Numbers List Composite Numbers List Square Numbers List Binary Numbers List Fibonacci Numbers List Ounces in a Cup Ounces in a Pound Ounces in a Gallon Ounces in a Liter Ounces in a Pint Ounces in a Quart Ounces in a TablespoonC InterviewC Interview Questionsnext ? ? prevC PointersThe pointer in C language is a variable which stores the address of another variable. This variable can be of type int, char, array, function, or any other pointer. The size of the pointer depends on the architecture. However, in 32-bit architecture the size of a pointer is 2 byte.Consider the following example to define a pointer which stores the address of an integer.int n = 10; 
int* p = &n; // Variable p of type pointer is pointing to the address of the variable n of type integer. Declaring a pointerThe pointer in c language can be declared using * (asterisk symbol). It is also known as indirection pointer used to dereference a pointer.int *a;//pointer to int
char *c;//pointer to charPointer ExampleAn example of using pointers to print the address and value is given below.As you can see in the above figure, pointer variable stores the address of number variable, i.e., fff4. The value of number variable is 50. But the address of pointer variable p is aaa3.By the help of * (indirection operator), we can print the value of pointer variable p.Let's see the pointer example as explained for the above figure.#include
int main(){
int number=50;  
int *p;    
p=&number;//stores the address of number variable  
printf("Address of p variable is %x \n",p); // p contains the address of the number therefore printing p gives the address of number.   
printf("Value of p variable is %d \n",*p); // As we know that * is used to dereference a pointer therefore if we print *p, we will get the value stored at the address contained by p.  
return 0;
}  OutputAddress of number variable is fff4
Address of p variable is fff4
Value of p variable is 50Pointer to arrayint arr[10];
int *p[10]=&arr; // Variable p of type pointer is pointing to the address of an integer array arr.Pointer to a functionvoid show (int);
void(*p)(int) = &display; // Pointer p is pointing to the address of a functionPointer to structurestruct st {
	int i;
	float f;
}ref;
struct st *p = &ref;Advantage of pointer1) Pointer reduces the code and improves the performance, it is used to retrieving strings, trees, etc. and used with arrays, structures, and functions.2) We can return multiple values from a function using the pointer.3) It makes you able to access any memory location in the computer's memory.Usage of pointerThere are many applications of pointers in c language.1) Dynamic memory allocationIn c language, we can dynamically allocate memory using malloc() and calloc() functions where the pointer is used.2) Arrays, Functions, and StructuresPointers in c language are widely used in arrays, functions, and structures. It reduces the code and improves the performance.Address Of (&) OperatorThe address of operator '&' returns the address of a variable. But, we need to use %u to display the address of a variable.#include
int main(){
int number=50; 
printf("value of number is %d, address of number is %u",number,&number);  
return 0;
}  Outputvalue of number is 50, address of number is fff4NULL PointerA pointer that is not assigned any value but NULL is known as the NULL pointer. If you don't have any address to be specified in the pointer at the time of declaration, you can assign NULL value. It will provide a better approach.int *p=NULL;In the most libraries, the value of the pointer is 0 (zero).Pointer Program to swap two numbers without using the 3rd variable.#include
int main(){
int a=10,b=20,*p1=&a,*p2=&b;

printf("Before swap: *p1=%d *p2=%d",*p1,*p2);
*p1=*p1+*p2;
*p2=*p1-*p2;
*p1=*p1-*p2;
printf("\nAfter swap: *p1=%d *p2=%d",*p1,*p2);

return 0;
}

OutputBefore swap: *p1=10 *p2=20
After swap: *p1=20 *p2=10Reading complex pointersThere are several things which must be taken into the consideration while reading the complex pointers in C. Lets see the precedence and associativity of the operators which are used regarding pointers.OperatorPrecedenceAssociativity(), []1Left to right*, identifier2Right to leftData type3-Here,we must notice that,(): This operator is a bracket operator used to declare and define the function.[]: This operator is an array subscript operator* : This operator is a pointer operator.Identifier: It is the name of the pointer. The priority will always be assigned to this.Data type: Data type is the type of the variable to which the pointer is intended to point. It also includes the modifier like signed int, long, etc).How to read the pointer: int (*p)[10].To read the pointer, we must see that () and [] have the equal precedence. Therefore, their associativity must be considered here. The associativity is left to right, so the priority goes to ().Inside the bracket (), pointer operator * and pointer name (identifier) p have the same precedence. Therefore, their associativity must be considered here which is right to left, so the priority goes to p, and the second priority goes to *.Assign the 3rd priority to [] since the data type has the last precedence. Therefore the pointer will look like following.char -> 4* -> 2p -> 1[10] -> 3The pointer will be read as p is a pointer to an array of integers of size 10.ExampleHow to read the following pointer?int (*p)(int (*)[2], int (*)void))ExplanationThis pointer will be read as p is a pointer to such function which accepts the first parameter as the pointer to a one-dimensional array of integers of size two and the second parameter as the pointer to a function which parameter is void and return type is the integer.Next TopicC Pointer to Pointer? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
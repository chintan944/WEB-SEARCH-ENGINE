C++ multiset count() function - javatpoint?HomeCC++C#JavaPHPHTMLCSSJavaScriptjQueryXMLJSONAjaxNode.jsSQLQuizProjectsInterview QCommentForumTrainingC++ multisetC++ multiset constructor destructor begin() end() operator= rbegin() rend() cbegin() cend() max_size() size() crbegin() crend() empty() insert() clear() emplace() erase() swap() emplace_hint() find() key_comp() value_comp() count() equal_range() lower_bound() upper_bound() get_allocator() operator== operator!= operator< operator<= operator> operator>= swap()next ? ? prevC++ multiset count()C++ Multiset count() function is used to return the number of elements found in the container. Since, the multiset container does not contain any duplicate element, this function actually returns 1 if the element with value val is present in the multiset container otherwise, it returns 0.Syntaxsize_type count (const value_type& val) const;Parameterval: Value to be searched in the multiset container.Return valueIt returns 1 if the element with value val is present in the multiset container or 0 otherwise.ComplexityLogarithmic in size.Iterator validityNo changes.Data RacesThe container is accessed.Concurrently accessing the elements of container is safe.Exception SafetyIf an exception is thrown, there are no changes in the multiset.Example 1Let's see the simple example to search the element with the given key value:#include <iostream>
#include <set>

using namespace std;
 
int main()
{
    // initialize container
    multiset<int> mp;
 
    // insert elements in random order
    mp.insert( 30 );
    mp.insert( 40 );
    mp.insert( 30 );
    mp.insert( 20);
    mp.insert( 50 );
 
    // checks if key 30 is present or not
    if (mp.count(30))
        cout << "The key 30 is present\n";
    else
        cout << "The key 30 is not present\n";
 
    // checks if key 100 is present or not
    if (mp.count(100))
        cout << "The key 100 is present\n";
    else
        cout << "The key 100 is not present\n";
 
    return 0;
}Output:The key 30 is present
The key 100 is not presentIn the above example, count() function checks for the given value. If the element is present in the multiset container, then it will display the message that element is present otherwise, not present.Example 2Let's see a simple example to search for the elements of the multiset:#include <iostream>
#include <set>

using namespace std;

int main ()
{
  multiset<char> mymultiset;
  char c;

  mymultiset = {'a', 'c', 'f'};

  for (c='a'; c<'h'; c++)
  {
    cout << c;
    if (mymultiset.count(c)>0)
      cout << " is an element of mymultiset.\n";
    else 
      cout << " is not an element of mymultiset.\n";
  }

  return 0;
}Output:a is an element of mymultiset.
b is not an element of mymultiset.
c is an element of mymultiset.
d is not an element of mymultiset.
e is not an element of mymultiset.
f is an element of mymultiset.
g is not an element of mymultiset.In the above example, count() function is used to search for the 'a' to 'h' elements in the multiset.Example 3Let's see a simple example to search keys in the multiset:#include <iostream>
#include <set>

using namespace std;

int main(void) {

   multiset<char> m = {'a','b','b','d'};
            
   if (m.count('a') == 1) {
       cout<< " 'a' is present in the multiset \n";
   }

   if (m.count('z') == 0) {
      cout << " 'z' is not present in the multiset" << endl;
   }

   return 0;
}Output:'a' is present in the multiset 
'z' is not present in the multisetIn the above example, key 'a' is present in the multiset m hence, it will be the value of 'a' and key 'z' is not present in the multiset hence, there is no value of 'z'.Example 4Let's see a simple example:#include <set>  
#include <iostream>  
  
int main()  
{  
    using namespace std;  
    multiset<int> s1;  
    multiset<int>::size_type i;  
  
    s1.insert(1);  
    s1.insert(1);  
  
    // Keys must be unique in multiset, so duplicates are ignored  
    i = s1.count(1);  
    cout << "The number of elements in s1 with a sort key of 1 is: "  
         << i << "." << endl;  
  
    i = s1.count(2);  
    cout << "The number of elements in s1 with a sort key of 2 is: "  
         << i << "." << endl;  
}Output:The number of elements in s1 with a sort key of 1 is: 1.
The number of elements in s1 with a sort key of 2 is: 0.Next TopicC++ multiset? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
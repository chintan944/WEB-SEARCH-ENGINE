Bash Alias - Javatpoint?HomeJavaCBashJavaScriptXMLAjaxSQLC++C#HTMLAndroidCloudDesign PatternQuizProjectsInterview QCommentForumBash TutorialBash Tutorial What is Bash History of Bash Features of Bash Bash Scripting Filesystem & File Permission Hello World! Bash Script Relative vs Absolute path Bash Comments Bash Quotes Bash Variables Read User Input Bash Date Format Bash SleepBash OperatorsBash Arithmetic OperatorsConditional StatementsBash If Statement Bash If Else Bash Else If Bash CaseBash LoopsBash For Loop Bash While Loop Bash Until LoopBash StringBash String Bash Find String Bash Split String Bash Substring Bash Concatenate StringBash FunctionBash FunctionsBash ArrayBash ArraysMiscellaneousBash Read File Bash Write File Check if file Exists Check if Variable is Set Bash Alias Git Bash Zsh vs Bash Bash Hash Commandnext ? ? prevBash AliasThere are the majority of commands that we use while operating the command-line interface. Most of the commands are habitual, and people may run those commands in the same way every day. However, we have an option in Bash to create our own shortcuts with the help of aliases, which will eliminate the extraneous typing by using shortened names.Bash Alias is used to set a shortcut command for a longer command. The alias command allows us to launch any command or set commands by using a single word. For example, we can set the command 'cc' as a shortcut for the 'clear' command. Using 'cc + enter' is comparatively much faster than to type 'clear' command.Alias is usually declared within the ~/.bash_profile or ~/.bashrc file."A .bash_profile and .bashrc files are referred to as configuration files for the bash shell. All the bash configurations, such as all the terminal sessions, the configuration comprising of environment variables, default directory, color, bash theme, etc., are stored in the configuration file. The name of the configuration file is usually ".bashrc" for a terminal-sessions and ".bash_profile" for login shells."Bash Alias StructureA bash alias contains the following structure:alias [alias_name]="[command_to_alias]"A new alias is defined on a new line with the 'alias' keyword. We need to define the shortcut command that we want to use with the alias name, followed by an equal sign. Then, we type the full command that we want to run within the quotes. There should be no spacing between the neighbor elements and the equal sign. It's an important thing to remember; otherwise, the command will be broken.Create a Bash AliasCreating aliases in bash is straight forward. We can declare the aliases into the command line by following the structure shown above.Let's start with a simple bash alias now. One of the commonly used commands that many people use to get the listing of all the files and directory, including hidden files, is "ls -la". We can create a shortcut "ll' to perform an action of "ls -la" by typing the following command in a terminal:alias ll="ls -la"Now, if we type the alias "ll" in a terminal, we will receive the listing of all the files and directories in a long format as similar to the "ls -la" command.Note: It should be noted that if we set the aliases through a terminal using this way, aliases will only be available for the current shell session. When we open a new terminal window, aliases will not be available.If we want to make the defined aliases persistent, we have to add this into one of the files which are read when a shell session starts. The most common choices are ~/.bash_profile or ~/.bashrc, as we have mentioned earlier. We are required to open any of these files and add the aliases there.It is a good practice to assign such names for the aliases, which are easy to remember. It is also suggested to add a comment declaring an entire function related to bash aliases for future reference.If we want to make our .bashrc file more modular, then we can put the aliases in a separate file, i.e., ~/.bash_aliases. We need to make sure that the code appears in the ~/.bashrc file:if [ -e $HOME/.bash_aliases ]; then
source $HOME/.bash_aliases
fiRemove/Delete a Bash AliasTo remove the alias, we are required to use the following structure:unalias [alias_name]="[command_to_alias]"To remove the "ll" alias that we have created above, we can use the unalias command:unalias llThe "ll" alias will be removed.If aliases are declared in ~/.bash_profile or ~/.bashrc, simply edit the file using a text editor and remove those aliases from there.List Bash AliasesWe can list all the configured aliases by using the "alias" command in a terminal without any arguments:aliasIt will look like this:Bash Aliases with Arguments (Bash Functions)In some cases, we may require the aliases which accept one or more argument. In such cases, bash functions are useful.Following is the syntax for creating bash functions. It can be declared in two different formats:function_name  () {
	[commands]
}Orfunction function_name {
	[commands]
}To pass any number of arguments to the bash function, we can simply put them right after the function's name separated by a space. The passed parameters can be $1, $2, $3, etc. It usually depends upon the corresponding position of the parameter after the function's name. The $0 variable is kept reserved for the function name.Now, we are going to create a simple bash function, which will create a directory and then navigate into it without using 'mkdir' and 'cd' command:mkcd ()
{
mkdir -p -- "$1" && cd -p -- "$1"
}Just like aliases, we need to add the function to the ~/.bashrc file and run source~/.bash_profile to reload the file. Here, AND Operator (&&) ensures that the second command runs only if the first command is executed successfully. And double dash sign (--) ensures that we are not passing an extra argument to the command.Now, we can create a new directory and then move into that directory using the command:mkcd new_directoryHence, the aliases are an excellent alternative to reduce the amount of typing for the long commands repeatedly.Next TopicGit Bash? prev next ?Help Others, Please ShareLearn Latest TutorialsOpenpyxlTallyGodotSpring BootGradleUMLANNES6FlutterSelenium PyFirebaseCobolPreparationAptitudeReasoningVerbal A.InterviewCompanyTrending TechnologiesAIAWSSeleniumCloudHadoopReactJSD. ScienceAngular 7BlockchainGitMLDevOpsB.Tech / MCADBMSDSDAAOSC. NetworkCompiler D.COAD. Math.E. HackingC. GraphicsSoftware E.Web Tech.Cyber Sec.AutomataCC++Java.NetPythonProgramsControl S.Data MiningJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.Duration: 1 week to 2 weekLike/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemapAbout Me© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.